//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.34209
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MembersListManagementProgram {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet : global::System.Data.DataSet {
        
        private M_CODataTable tableM_CO;
        
        private M_DEPTDataTable tableM_DEPT;
        
        private M_EMPDataTable tableM_EMP;
        
        private M_LOOKUPDataTable tableM_LOOKUP;
        
        private T_TASKDataTable tableT_TASK;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public DataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected DataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["M_CO"] != null)) {
                    base.Tables.Add(new M_CODataTable(ds.Tables["M_CO"]));
                }
                if ((ds.Tables["M_DEPT"] != null)) {
                    base.Tables.Add(new M_DEPTDataTable(ds.Tables["M_DEPT"]));
                }
                if ((ds.Tables["M_EMP"] != null)) {
                    base.Tables.Add(new M_EMPDataTable(ds.Tables["M_EMP"]));
                }
                if ((ds.Tables["M_LOOKUP"] != null)) {
                    base.Tables.Add(new M_LOOKUPDataTable(ds.Tables["M_LOOKUP"]));
                }
                if ((ds.Tables["T_TASK"] != null)) {
                    base.Tables.Add(new T_TASKDataTable(ds.Tables["T_TASK"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public M_CODataTable M_CO {
            get {
                return this.tableM_CO;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public M_DEPTDataTable M_DEPT {
            get {
                return this.tableM_DEPT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public M_EMPDataTable M_EMP {
            get {
                return this.tableM_EMP;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public M_LOOKUPDataTable M_LOOKUP {
            get {
                return this.tableM_LOOKUP;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public T_TASKDataTable T_TASK {
            get {
                return this.tableT_TASK;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            DataSet cln = ((DataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["M_CO"] != null)) {
                    base.Tables.Add(new M_CODataTable(ds.Tables["M_CO"]));
                }
                if ((ds.Tables["M_DEPT"] != null)) {
                    base.Tables.Add(new M_DEPTDataTable(ds.Tables["M_DEPT"]));
                }
                if ((ds.Tables["M_EMP"] != null)) {
                    base.Tables.Add(new M_EMPDataTable(ds.Tables["M_EMP"]));
                }
                if ((ds.Tables["M_LOOKUP"] != null)) {
                    base.Tables.Add(new M_LOOKUPDataTable(ds.Tables["M_LOOKUP"]));
                }
                if ((ds.Tables["T_TASK"] != null)) {
                    base.Tables.Add(new T_TASKDataTable(ds.Tables["T_TASK"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableM_CO = ((M_CODataTable)(base.Tables["M_CO"]));
            if ((initTable == true)) {
                if ((this.tableM_CO != null)) {
                    this.tableM_CO.InitVars();
                }
            }
            this.tableM_DEPT = ((M_DEPTDataTable)(base.Tables["M_DEPT"]));
            if ((initTable == true)) {
                if ((this.tableM_DEPT != null)) {
                    this.tableM_DEPT.InitVars();
                }
            }
            this.tableM_EMP = ((M_EMPDataTable)(base.Tables["M_EMP"]));
            if ((initTable == true)) {
                if ((this.tableM_EMP != null)) {
                    this.tableM_EMP.InitVars();
                }
            }
            this.tableM_LOOKUP = ((M_LOOKUPDataTable)(base.Tables["M_LOOKUP"]));
            if ((initTable == true)) {
                if ((this.tableM_LOOKUP != null)) {
                    this.tableM_LOOKUP.InitVars();
                }
            }
            this.tableT_TASK = ((T_TASKDataTable)(base.Tables["T_TASK"]));
            if ((initTable == true)) {
                if ((this.tableT_TASK != null)) {
                    this.tableT_TASK.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "DataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableM_CO = new M_CODataTable();
            base.Tables.Add(this.tableM_CO);
            this.tableM_DEPT = new M_DEPTDataTable();
            base.Tables.Add(this.tableM_DEPT);
            this.tableM_EMP = new M_EMPDataTable();
            base.Tables.Add(this.tableM_EMP);
            this.tableM_LOOKUP = new M_LOOKUPDataTable();
            base.Tables.Add(this.tableM_LOOKUP);
            this.tableT_TASK = new T_TASKDataTable();
            base.Tables.Add(this.tableT_TASK);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeM_CO() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeM_DEPT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeM_EMP() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeM_LOOKUP() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeT_TASK() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet ds = new DataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void M_CORowChangeEventHandler(object sender, M_CORowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void M_DEPTRowChangeEventHandler(object sender, M_DEPTRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void M_EMPRowChangeEventHandler(object sender, M_EMPRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void M_LOOKUPRowChangeEventHandler(object sender, M_LOOKUPRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void T_TASKRowChangeEventHandler(object sender, T_TASKRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class M_CODataTable : global::System.Data.TypedTableBase<M_CORow> {
            
            private global::System.Data.DataColumn columnCD_CO;
            
            private global::System.Data.DataColumn columnNM_CO;
            
            private global::System.Data.DataColumn columnNM_CO_SHORT;
            
            private global::System.Data.DataColumn columnTXT_ZIP;
            
            private global::System.Data.DataColumn columnTXT_ADDR1;
            
            private global::System.Data.DataColumn columnTXT_ADDR2;
            
            private global::System.Data.DataColumn columnTXT_ADDR3;
            
            private global::System.Data.DataColumn columnTXT_TEL;
            
            private global::System.Data.DataColumn columnTXT_FAX;
            
            private global::System.Data.DataColumn columnTXT_REM;
            
            private global::System.Data.DataColumn columnCD_CREATE;
            
            private global::System.Data.DataColumn columnDTM_CREATE;
            
            private global::System.Data.DataColumn columnCD_UPDATE;
            
            private global::System.Data.DataColumn columnDTM_UPDATE;
            
            private global::System.Data.DataColumn columnFLG_ACTIVE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_CODataTable() {
                this.TableName = "M_CO";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal M_CODataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected M_CODataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_COColumn {
                get {
                    return this.columnCD_CO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NM_COColumn {
                get {
                    return this.columnNM_CO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NM_CO_SHORTColumn {
                get {
                    return this.columnNM_CO_SHORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_ZIPColumn {
                get {
                    return this.columnTXT_ZIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_ADDR1Column {
                get {
                    return this.columnTXT_ADDR1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_ADDR2Column {
                get {
                    return this.columnTXT_ADDR2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_ADDR3Column {
                get {
                    return this.columnTXT_ADDR3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_TELColumn {
                get {
                    return this.columnTXT_TEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_FAXColumn {
                get {
                    return this.columnTXT_FAX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_REMColumn {
                get {
                    return this.columnTXT_REM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_CREATEColumn {
                get {
                    return this.columnCD_CREATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DTM_CREATEColumn {
                get {
                    return this.columnDTM_CREATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_UPDATEColumn {
                get {
                    return this.columnCD_UPDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DTM_UPDATEColumn {
                get {
                    return this.columnDTM_UPDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FLG_ACTIVEColumn {
                get {
                    return this.columnFLG_ACTIVE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_CORow this[int index] {
                get {
                    return ((M_CORow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_CORowChangeEventHandler M_CORowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_CORowChangeEventHandler M_CORowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_CORowChangeEventHandler M_CORowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_CORowChangeEventHandler M_CORowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddM_CORow(M_CORow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_CORow AddM_CORow(string CD_CO, string NM_CO, string NM_CO_SHORT, string TXT_ZIP, string TXT_ADDR1, string TXT_ADDR2, string TXT_ADDR3, string TXT_TEL, string TXT_FAX, string TXT_REM, string CD_CREATE, System.DateTime DTM_CREATE, string CD_UPDATE, System.DateTime DTM_UPDATE, string FLG_ACTIVE) {
                M_CORow rowM_CORow = ((M_CORow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CD_CO,
                        NM_CO,
                        NM_CO_SHORT,
                        TXT_ZIP,
                        TXT_ADDR1,
                        TXT_ADDR2,
                        TXT_ADDR3,
                        TXT_TEL,
                        TXT_FAX,
                        TXT_REM,
                        CD_CREATE,
                        DTM_CREATE,
                        CD_UPDATE,
                        DTM_UPDATE,
                        FLG_ACTIVE};
                rowM_CORow.ItemArray = columnValuesArray;
                this.Rows.Add(rowM_CORow);
                return rowM_CORow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_CORow FindByCD_CO(string CD_CO) {
                return ((M_CORow)(this.Rows.Find(new object[] {
                            CD_CO})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                M_CODataTable cln = ((M_CODataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new M_CODataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCD_CO = base.Columns["CD_CO"];
                this.columnNM_CO = base.Columns["NM_CO"];
                this.columnNM_CO_SHORT = base.Columns["NM_CO_SHORT"];
                this.columnTXT_ZIP = base.Columns["TXT_ZIP"];
                this.columnTXT_ADDR1 = base.Columns["TXT_ADDR1"];
                this.columnTXT_ADDR2 = base.Columns["TXT_ADDR2"];
                this.columnTXT_ADDR3 = base.Columns["TXT_ADDR3"];
                this.columnTXT_TEL = base.Columns["TXT_TEL"];
                this.columnTXT_FAX = base.Columns["TXT_FAX"];
                this.columnTXT_REM = base.Columns["TXT_REM"];
                this.columnCD_CREATE = base.Columns["CD_CREATE"];
                this.columnDTM_CREATE = base.Columns["DTM_CREATE"];
                this.columnCD_UPDATE = base.Columns["CD_UPDATE"];
                this.columnDTM_UPDATE = base.Columns["DTM_UPDATE"];
                this.columnFLG_ACTIVE = base.Columns["FLG_ACTIVE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCD_CO = new global::System.Data.DataColumn("CD_CO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_CO);
                this.columnNM_CO = new global::System.Data.DataColumn("NM_CO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNM_CO);
                this.columnNM_CO_SHORT = new global::System.Data.DataColumn("NM_CO_SHORT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNM_CO_SHORT);
                this.columnTXT_ZIP = new global::System.Data.DataColumn("TXT_ZIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_ZIP);
                this.columnTXT_ADDR1 = new global::System.Data.DataColumn("TXT_ADDR1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_ADDR1);
                this.columnTXT_ADDR2 = new global::System.Data.DataColumn("TXT_ADDR2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_ADDR2);
                this.columnTXT_ADDR3 = new global::System.Data.DataColumn("TXT_ADDR3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_ADDR3);
                this.columnTXT_TEL = new global::System.Data.DataColumn("TXT_TEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_TEL);
                this.columnTXT_FAX = new global::System.Data.DataColumn("TXT_FAX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_FAX);
                this.columnTXT_REM = new global::System.Data.DataColumn("TXT_REM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_REM);
                this.columnCD_CREATE = new global::System.Data.DataColumn("CD_CREATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_CREATE);
                this.columnDTM_CREATE = new global::System.Data.DataColumn("DTM_CREATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDTM_CREATE);
                this.columnCD_UPDATE = new global::System.Data.DataColumn("CD_UPDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_UPDATE);
                this.columnDTM_UPDATE = new global::System.Data.DataColumn("DTM_UPDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDTM_UPDATE);
                this.columnFLG_ACTIVE = new global::System.Data.DataColumn("FLG_ACTIVE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLG_ACTIVE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCD_CO}, true));
                this.columnCD_CO.AllowDBNull = false;
                this.columnCD_CO.Unique = true;
                this.columnCD_CO.MaxLength = 30;
                this.columnNM_CO.AllowDBNull = false;
                this.columnNM_CO.MaxLength = 100;
                this.columnNM_CO_SHORT.AllowDBNull = false;
                this.columnNM_CO_SHORT.MaxLength = 100;
                this.columnTXT_ZIP.MaxLength = 30;
                this.columnTXT_ADDR1.MaxLength = 100;
                this.columnTXT_ADDR2.MaxLength = 100;
                this.columnTXT_ADDR3.MaxLength = 100;
                this.columnTXT_TEL.MaxLength = 30;
                this.columnTXT_FAX.MaxLength = 30;
                this.columnTXT_REM.MaxLength = 500;
                this.columnCD_CREATE.AllowDBNull = false;
                this.columnCD_CREATE.MaxLength = 30;
                this.columnDTM_CREATE.AllowDBNull = false;
                this.columnCD_UPDATE.AllowDBNull = false;
                this.columnCD_UPDATE.MaxLength = 30;
                this.columnDTM_UPDATE.AllowDBNull = false;
                this.columnFLG_ACTIVE.AllowDBNull = false;
                this.columnFLG_ACTIVE.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_CORow NewM_CORow() {
                return ((M_CORow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new M_CORow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(M_CORow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.M_CORowChanged != null)) {
                    this.M_CORowChanged(this, new M_CORowChangeEvent(((M_CORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.M_CORowChanging != null)) {
                    this.M_CORowChanging(this, new M_CORowChangeEvent(((M_CORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.M_CORowDeleted != null)) {
                    this.M_CORowDeleted(this, new M_CORowChangeEvent(((M_CORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.M_CORowDeleting != null)) {
                    this.M_CORowDeleting(this, new M_CORowChangeEvent(((M_CORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveM_CORow(M_CORow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "M_CODataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class M_DEPTDataTable : global::System.Data.TypedTableBase<M_DEPTRow> {
            
            private global::System.Data.DataColumn columnCD_CO;
            
            private global::System.Data.DataColumn columnCD_DEPT;
            
            private global::System.Data.DataColumn columnNM_DEPT;
            
            private global::System.Data.DataColumn columnTXT_REM;
            
            private global::System.Data.DataColumn columnCD_CREATE;
            
            private global::System.Data.DataColumn columnDTM_CREATE;
            
            private global::System.Data.DataColumn columnCD_UPDATE;
            
            private global::System.Data.DataColumn columnDTM_UPDATE;
            
            private global::System.Data.DataColumn columnFLG_ACTIVE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_DEPTDataTable() {
                this.TableName = "M_DEPT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal M_DEPTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected M_DEPTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_COColumn {
                get {
                    return this.columnCD_CO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_DEPTColumn {
                get {
                    return this.columnCD_DEPT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NM_DEPTColumn {
                get {
                    return this.columnNM_DEPT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_REMColumn {
                get {
                    return this.columnTXT_REM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_CREATEColumn {
                get {
                    return this.columnCD_CREATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DTM_CREATEColumn {
                get {
                    return this.columnDTM_CREATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_UPDATEColumn {
                get {
                    return this.columnCD_UPDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DTM_UPDATEColumn {
                get {
                    return this.columnDTM_UPDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FLG_ACTIVEColumn {
                get {
                    return this.columnFLG_ACTIVE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_DEPTRow this[int index] {
                get {
                    return ((M_DEPTRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_DEPTRowChangeEventHandler M_DEPTRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_DEPTRowChangeEventHandler M_DEPTRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_DEPTRowChangeEventHandler M_DEPTRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_DEPTRowChangeEventHandler M_DEPTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddM_DEPTRow(M_DEPTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_DEPTRow AddM_DEPTRow(string CD_CO, string CD_DEPT, string NM_DEPT, string TXT_REM, string CD_CREATE, System.DateTime DTM_CREATE, string CD_UPDATE, System.DateTime DTM_UPDATE, string FLG_ACTIVE) {
                M_DEPTRow rowM_DEPTRow = ((M_DEPTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CD_CO,
                        CD_DEPT,
                        NM_DEPT,
                        TXT_REM,
                        CD_CREATE,
                        DTM_CREATE,
                        CD_UPDATE,
                        DTM_UPDATE,
                        FLG_ACTIVE};
                rowM_DEPTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowM_DEPTRow);
                return rowM_DEPTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_DEPTRow FindByCD_COCD_DEPT(string CD_CO, string CD_DEPT) {
                return ((M_DEPTRow)(this.Rows.Find(new object[] {
                            CD_CO,
                            CD_DEPT})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                M_DEPTDataTable cln = ((M_DEPTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new M_DEPTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCD_CO = base.Columns["CD_CO"];
                this.columnCD_DEPT = base.Columns["CD_DEPT"];
                this.columnNM_DEPT = base.Columns["NM_DEPT"];
                this.columnTXT_REM = base.Columns["TXT_REM"];
                this.columnCD_CREATE = base.Columns["CD_CREATE"];
                this.columnDTM_CREATE = base.Columns["DTM_CREATE"];
                this.columnCD_UPDATE = base.Columns["CD_UPDATE"];
                this.columnDTM_UPDATE = base.Columns["DTM_UPDATE"];
                this.columnFLG_ACTIVE = base.Columns["FLG_ACTIVE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCD_CO = new global::System.Data.DataColumn("CD_CO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_CO);
                this.columnCD_DEPT = new global::System.Data.DataColumn("CD_DEPT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_DEPT);
                this.columnNM_DEPT = new global::System.Data.DataColumn("NM_DEPT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNM_DEPT);
                this.columnTXT_REM = new global::System.Data.DataColumn("TXT_REM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_REM);
                this.columnCD_CREATE = new global::System.Data.DataColumn("CD_CREATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_CREATE);
                this.columnDTM_CREATE = new global::System.Data.DataColumn("DTM_CREATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDTM_CREATE);
                this.columnCD_UPDATE = new global::System.Data.DataColumn("CD_UPDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_UPDATE);
                this.columnDTM_UPDATE = new global::System.Data.DataColumn("DTM_UPDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDTM_UPDATE);
                this.columnFLG_ACTIVE = new global::System.Data.DataColumn("FLG_ACTIVE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLG_ACTIVE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCD_CO,
                                this.columnCD_DEPT}, true));
                this.columnCD_CO.AllowDBNull = false;
                this.columnCD_CO.MaxLength = 30;
                this.columnCD_DEPT.AllowDBNull = false;
                this.columnCD_DEPT.MaxLength = 30;
                this.columnNM_DEPT.AllowDBNull = false;
                this.columnNM_DEPT.MaxLength = 100;
                this.columnTXT_REM.MaxLength = 500;
                this.columnCD_CREATE.AllowDBNull = false;
                this.columnCD_CREATE.MaxLength = 30;
                this.columnDTM_CREATE.AllowDBNull = false;
                this.columnCD_UPDATE.AllowDBNull = false;
                this.columnCD_UPDATE.MaxLength = 30;
                this.columnDTM_UPDATE.AllowDBNull = false;
                this.columnFLG_ACTIVE.AllowDBNull = false;
                this.columnFLG_ACTIVE.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_DEPTRow NewM_DEPTRow() {
                return ((M_DEPTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new M_DEPTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(M_DEPTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.M_DEPTRowChanged != null)) {
                    this.M_DEPTRowChanged(this, new M_DEPTRowChangeEvent(((M_DEPTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.M_DEPTRowChanging != null)) {
                    this.M_DEPTRowChanging(this, new M_DEPTRowChangeEvent(((M_DEPTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.M_DEPTRowDeleted != null)) {
                    this.M_DEPTRowDeleted(this, new M_DEPTRowChangeEvent(((M_DEPTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.M_DEPTRowDeleting != null)) {
                    this.M_DEPTRowDeleting(this, new M_DEPTRowChangeEvent(((M_DEPTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveM_DEPTRow(M_DEPTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "M_DEPTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class M_EMPDataTable : global::System.Data.TypedTableBase<M_EMPRow> {
            
            private global::System.Data.DataColumn columnCD_CO;
            
            private global::System.Data.DataColumn columnCD_EMP;
            
            private global::System.Data.DataColumn columnNM_EMP;
            
            private global::System.Data.DataColumn columnTXT_PASSWD;
            
            private global::System.Data.DataColumn columnCD_DEPT;
            
            private global::System.Data.DataColumn columnTXT_ZIP;
            
            private global::System.Data.DataColumn columnTXT_ADDR1;
            
            private global::System.Data.DataColumn columnTXT_ADDR2;
            
            private global::System.Data.DataColumn columnTXT_ADDR3;
            
            private global::System.Data.DataColumn columnTXT_TEL;
            
            private global::System.Data.DataColumn columnTXT_FAX;
            
            private global::System.Data.DataColumn columnTXT_REM;
            
            private global::System.Data.DataColumn columnCD_CREATE;
            
            private global::System.Data.DataColumn columnDTM_CREATE;
            
            private global::System.Data.DataColumn columnCD_UPDATE;
            
            private global::System.Data.DataColumn columnDTM_UPDATE;
            
            private global::System.Data.DataColumn columnFLG_ACTIVE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_EMPDataTable() {
                this.TableName = "M_EMP";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal M_EMPDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected M_EMPDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_COColumn {
                get {
                    return this.columnCD_CO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_EMPColumn {
                get {
                    return this.columnCD_EMP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NM_EMPColumn {
                get {
                    return this.columnNM_EMP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_PASSWDColumn {
                get {
                    return this.columnTXT_PASSWD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_DEPTColumn {
                get {
                    return this.columnCD_DEPT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_ZIPColumn {
                get {
                    return this.columnTXT_ZIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_ADDR1Column {
                get {
                    return this.columnTXT_ADDR1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_ADDR2Column {
                get {
                    return this.columnTXT_ADDR2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_ADDR3Column {
                get {
                    return this.columnTXT_ADDR3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_TELColumn {
                get {
                    return this.columnTXT_TEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_FAXColumn {
                get {
                    return this.columnTXT_FAX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_REMColumn {
                get {
                    return this.columnTXT_REM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_CREATEColumn {
                get {
                    return this.columnCD_CREATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DTM_CREATEColumn {
                get {
                    return this.columnDTM_CREATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_UPDATEColumn {
                get {
                    return this.columnCD_UPDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DTM_UPDATEColumn {
                get {
                    return this.columnDTM_UPDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FLG_ACTIVEColumn {
                get {
                    return this.columnFLG_ACTIVE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_EMPRow this[int index] {
                get {
                    return ((M_EMPRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_EMPRowChangeEventHandler M_EMPRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_EMPRowChangeEventHandler M_EMPRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_EMPRowChangeEventHandler M_EMPRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_EMPRowChangeEventHandler M_EMPRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddM_EMPRow(M_EMPRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_EMPRow AddM_EMPRow(
                        string CD_CO, 
                        string CD_EMP, 
                        string NM_EMP, 
                        string TXT_PASSWD, 
                        string CD_DEPT, 
                        string TXT_ZIP, 
                        string TXT_ADDR1, 
                        string TXT_ADDR2, 
                        string TXT_ADDR3, 
                        string TXT_TEL, 
                        string TXT_FAX, 
                        string TXT_REM, 
                        string CD_CREATE, 
                        System.DateTime DTM_CREATE, 
                        string CD_UPDATE, 
                        System.DateTime DTM_UPDATE, 
                        string FLG_ACTIVE) {
                M_EMPRow rowM_EMPRow = ((M_EMPRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CD_CO,
                        CD_EMP,
                        NM_EMP,
                        TXT_PASSWD,
                        CD_DEPT,
                        TXT_ZIP,
                        TXT_ADDR1,
                        TXT_ADDR2,
                        TXT_ADDR3,
                        TXT_TEL,
                        TXT_FAX,
                        TXT_REM,
                        CD_CREATE,
                        DTM_CREATE,
                        CD_UPDATE,
                        DTM_UPDATE,
                        FLG_ACTIVE};
                rowM_EMPRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowM_EMPRow);
                return rowM_EMPRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_EMPRow FindByCD_COCD_EMP(string CD_CO, string CD_EMP) {
                return ((M_EMPRow)(this.Rows.Find(new object[] {
                            CD_CO,
                            CD_EMP})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                M_EMPDataTable cln = ((M_EMPDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new M_EMPDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCD_CO = base.Columns["CD_CO"];
                this.columnCD_EMP = base.Columns["CD_EMP"];
                this.columnNM_EMP = base.Columns["NM_EMP"];
                this.columnTXT_PASSWD = base.Columns["TXT_PASSWD"];
                this.columnCD_DEPT = base.Columns["CD_DEPT"];
                this.columnTXT_ZIP = base.Columns["TXT_ZIP"];
                this.columnTXT_ADDR1 = base.Columns["TXT_ADDR1"];
                this.columnTXT_ADDR2 = base.Columns["TXT_ADDR2"];
                this.columnTXT_ADDR3 = base.Columns["TXT_ADDR3"];
                this.columnTXT_TEL = base.Columns["TXT_TEL"];
                this.columnTXT_FAX = base.Columns["TXT_FAX"];
                this.columnTXT_REM = base.Columns["TXT_REM"];
                this.columnCD_CREATE = base.Columns["CD_CREATE"];
                this.columnDTM_CREATE = base.Columns["DTM_CREATE"];
                this.columnCD_UPDATE = base.Columns["CD_UPDATE"];
                this.columnDTM_UPDATE = base.Columns["DTM_UPDATE"];
                this.columnFLG_ACTIVE = base.Columns["FLG_ACTIVE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCD_CO = new global::System.Data.DataColumn("CD_CO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_CO);
                this.columnCD_EMP = new global::System.Data.DataColumn("CD_EMP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_EMP);
                this.columnNM_EMP = new global::System.Data.DataColumn("NM_EMP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNM_EMP);
                this.columnTXT_PASSWD = new global::System.Data.DataColumn("TXT_PASSWD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_PASSWD);
                this.columnCD_DEPT = new global::System.Data.DataColumn("CD_DEPT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_DEPT);
                this.columnTXT_ZIP = new global::System.Data.DataColumn("TXT_ZIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_ZIP);
                this.columnTXT_ADDR1 = new global::System.Data.DataColumn("TXT_ADDR1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_ADDR1);
                this.columnTXT_ADDR2 = new global::System.Data.DataColumn("TXT_ADDR2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_ADDR2);
                this.columnTXT_ADDR3 = new global::System.Data.DataColumn("TXT_ADDR3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_ADDR3);
                this.columnTXT_TEL = new global::System.Data.DataColumn("TXT_TEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_TEL);
                this.columnTXT_FAX = new global::System.Data.DataColumn("TXT_FAX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_FAX);
                this.columnTXT_REM = new global::System.Data.DataColumn("TXT_REM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_REM);
                this.columnCD_CREATE = new global::System.Data.DataColumn("CD_CREATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_CREATE);
                this.columnDTM_CREATE = new global::System.Data.DataColumn("DTM_CREATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDTM_CREATE);
                this.columnCD_UPDATE = new global::System.Data.DataColumn("CD_UPDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_UPDATE);
                this.columnDTM_UPDATE = new global::System.Data.DataColumn("DTM_UPDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDTM_UPDATE);
                this.columnFLG_ACTIVE = new global::System.Data.DataColumn("FLG_ACTIVE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLG_ACTIVE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCD_CO,
                                this.columnCD_EMP}, true));
                this.columnCD_CO.AllowDBNull = false;
                this.columnCD_CO.MaxLength = 30;
                this.columnCD_EMP.AllowDBNull = false;
                this.columnCD_EMP.MaxLength = 30;
                this.columnNM_EMP.AllowDBNull = false;
                this.columnNM_EMP.MaxLength = 100;
                this.columnTXT_PASSWD.AllowDBNull = false;
                this.columnTXT_PASSWD.MaxLength = 30;
                this.columnCD_DEPT.MaxLength = 30;
                this.columnTXT_ZIP.MaxLength = 30;
                this.columnTXT_ADDR1.MaxLength = 100;
                this.columnTXT_ADDR2.MaxLength = 100;
                this.columnTXT_ADDR3.MaxLength = 100;
                this.columnTXT_TEL.MaxLength = 30;
                this.columnTXT_FAX.MaxLength = 30;
                this.columnTXT_REM.MaxLength = 500;
                this.columnCD_CREATE.AllowDBNull = false;
                this.columnCD_CREATE.MaxLength = 30;
                this.columnDTM_CREATE.AllowDBNull = false;
                this.columnCD_UPDATE.AllowDBNull = false;
                this.columnCD_UPDATE.MaxLength = 30;
                this.columnDTM_UPDATE.AllowDBNull = false;
                this.columnFLG_ACTIVE.AllowDBNull = false;
                this.columnFLG_ACTIVE.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_EMPRow NewM_EMPRow() {
                return ((M_EMPRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new M_EMPRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(M_EMPRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.M_EMPRowChanged != null)) {
                    this.M_EMPRowChanged(this, new M_EMPRowChangeEvent(((M_EMPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.M_EMPRowChanging != null)) {
                    this.M_EMPRowChanging(this, new M_EMPRowChangeEvent(((M_EMPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.M_EMPRowDeleted != null)) {
                    this.M_EMPRowDeleted(this, new M_EMPRowChangeEvent(((M_EMPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.M_EMPRowDeleting != null)) {
                    this.M_EMPRowDeleting(this, new M_EMPRowChangeEvent(((M_EMPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveM_EMPRow(M_EMPRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "M_EMPDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class M_LOOKUPDataTable : global::System.Data.TypedTableBase<M_LOOKUPRow> {
            
            private global::System.Data.DataColumn columnCD_CO;
            
            private global::System.Data.DataColumn columnTXT_LOOKUP_KEY;
            
            private global::System.Data.DataColumn columnNM_LOOKUP;
            
            private global::System.Data.DataColumn columnCD_LOOKUP_TYPE;
            
            private global::System.Data.DataColumn columnCD_LOOKUP;
            
            private global::System.Data.DataColumn columnN_SORT;
            
            private global::System.Data.DataColumn columnTXT_REM;
            
            private global::System.Data.DataColumn columnCD_CREATE;
            
            private global::System.Data.DataColumn columnDTM_CREATE;
            
            private global::System.Data.DataColumn columnCD_UPDATE;
            
            private global::System.Data.DataColumn columnDTM_UPDATE;
            
            private global::System.Data.DataColumn columnFLG_ACTIVE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_LOOKUPDataTable() {
                this.TableName = "M_LOOKUP";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal M_LOOKUPDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected M_LOOKUPDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_COColumn {
                get {
                    return this.columnCD_CO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_LOOKUP_KEYColumn {
                get {
                    return this.columnTXT_LOOKUP_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NM_LOOKUPColumn {
                get {
                    return this.columnNM_LOOKUP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_LOOKUP_TYPEColumn {
                get {
                    return this.columnCD_LOOKUP_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_LOOKUPColumn {
                get {
                    return this.columnCD_LOOKUP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn N_SORTColumn {
                get {
                    return this.columnN_SORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_REMColumn {
                get {
                    return this.columnTXT_REM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_CREATEColumn {
                get {
                    return this.columnCD_CREATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DTM_CREATEColumn {
                get {
                    return this.columnDTM_CREATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_UPDATEColumn {
                get {
                    return this.columnCD_UPDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DTM_UPDATEColumn {
                get {
                    return this.columnDTM_UPDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FLG_ACTIVEColumn {
                get {
                    return this.columnFLG_ACTIVE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_LOOKUPRow this[int index] {
                get {
                    return ((M_LOOKUPRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_LOOKUPRowChangeEventHandler M_LOOKUPRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_LOOKUPRowChangeEventHandler M_LOOKUPRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_LOOKUPRowChangeEventHandler M_LOOKUPRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event M_LOOKUPRowChangeEventHandler M_LOOKUPRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddM_LOOKUPRow(M_LOOKUPRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_LOOKUPRow AddM_LOOKUPRow(string CD_CO, string TXT_LOOKUP_KEY, string NM_LOOKUP, string CD_LOOKUP_TYPE, string CD_LOOKUP, decimal N_SORT, string TXT_REM, string CD_CREATE, System.DateTime DTM_CREATE, string CD_UPDATE, System.DateTime DTM_UPDATE, string FLG_ACTIVE) {
                M_LOOKUPRow rowM_LOOKUPRow = ((M_LOOKUPRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CD_CO,
                        TXT_LOOKUP_KEY,
                        NM_LOOKUP,
                        CD_LOOKUP_TYPE,
                        CD_LOOKUP,
                        N_SORT,
                        TXT_REM,
                        CD_CREATE,
                        DTM_CREATE,
                        CD_UPDATE,
                        DTM_UPDATE,
                        FLG_ACTIVE};
                rowM_LOOKUPRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowM_LOOKUPRow);
                return rowM_LOOKUPRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_LOOKUPRow FindByCD_COTXT_LOOKUP_KEY(string CD_CO, string TXT_LOOKUP_KEY) {
                return ((M_LOOKUPRow)(this.Rows.Find(new object[] {
                            CD_CO,
                            TXT_LOOKUP_KEY})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                M_LOOKUPDataTable cln = ((M_LOOKUPDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new M_LOOKUPDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCD_CO = base.Columns["CD_CO"];
                this.columnTXT_LOOKUP_KEY = base.Columns["TXT_LOOKUP_KEY"];
                this.columnNM_LOOKUP = base.Columns["NM_LOOKUP"];
                this.columnCD_LOOKUP_TYPE = base.Columns["CD_LOOKUP_TYPE"];
                this.columnCD_LOOKUP = base.Columns["CD_LOOKUP"];
                this.columnN_SORT = base.Columns["N_SORT"];
                this.columnTXT_REM = base.Columns["TXT_REM"];
                this.columnCD_CREATE = base.Columns["CD_CREATE"];
                this.columnDTM_CREATE = base.Columns["DTM_CREATE"];
                this.columnCD_UPDATE = base.Columns["CD_UPDATE"];
                this.columnDTM_UPDATE = base.Columns["DTM_UPDATE"];
                this.columnFLG_ACTIVE = base.Columns["FLG_ACTIVE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCD_CO = new global::System.Data.DataColumn("CD_CO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_CO);
                this.columnTXT_LOOKUP_KEY = new global::System.Data.DataColumn("TXT_LOOKUP_KEY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_LOOKUP_KEY);
                this.columnNM_LOOKUP = new global::System.Data.DataColumn("NM_LOOKUP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNM_LOOKUP);
                this.columnCD_LOOKUP_TYPE = new global::System.Data.DataColumn("CD_LOOKUP_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_LOOKUP_TYPE);
                this.columnCD_LOOKUP = new global::System.Data.DataColumn("CD_LOOKUP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_LOOKUP);
                this.columnN_SORT = new global::System.Data.DataColumn("N_SORT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnN_SORT);
                this.columnTXT_REM = new global::System.Data.DataColumn("TXT_REM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_REM);
                this.columnCD_CREATE = new global::System.Data.DataColumn("CD_CREATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_CREATE);
                this.columnDTM_CREATE = new global::System.Data.DataColumn("DTM_CREATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDTM_CREATE);
                this.columnCD_UPDATE = new global::System.Data.DataColumn("CD_UPDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_UPDATE);
                this.columnDTM_UPDATE = new global::System.Data.DataColumn("DTM_UPDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDTM_UPDATE);
                this.columnFLG_ACTIVE = new global::System.Data.DataColumn("FLG_ACTIVE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLG_ACTIVE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCD_CO,
                                this.columnTXT_LOOKUP_KEY}, true));
                this.columnCD_CO.AllowDBNull = false;
                this.columnCD_CO.MaxLength = 30;
                this.columnTXT_LOOKUP_KEY.AllowDBNull = false;
                this.columnTXT_LOOKUP_KEY.MaxLength = 30;
                this.columnNM_LOOKUP.AllowDBNull = false;
                this.columnNM_LOOKUP.MaxLength = 100;
                this.columnCD_LOOKUP_TYPE.AllowDBNull = false;
                this.columnCD_LOOKUP_TYPE.MaxLength = 30;
                this.columnCD_LOOKUP.AllowDBNull = false;
                this.columnCD_LOOKUP.MaxLength = 30;
                this.columnN_SORT.AllowDBNull = false;
                this.columnTXT_REM.MaxLength = 500;
                this.columnCD_CREATE.AllowDBNull = false;
                this.columnCD_CREATE.MaxLength = 30;
                this.columnDTM_CREATE.AllowDBNull = false;
                this.columnCD_UPDATE.AllowDBNull = false;
                this.columnCD_UPDATE.MaxLength = 30;
                this.columnDTM_UPDATE.AllowDBNull = false;
                this.columnFLG_ACTIVE.AllowDBNull = false;
                this.columnFLG_ACTIVE.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_LOOKUPRow NewM_LOOKUPRow() {
                return ((M_LOOKUPRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new M_LOOKUPRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(M_LOOKUPRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.M_LOOKUPRowChanged != null)) {
                    this.M_LOOKUPRowChanged(this, new M_LOOKUPRowChangeEvent(((M_LOOKUPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.M_LOOKUPRowChanging != null)) {
                    this.M_LOOKUPRowChanging(this, new M_LOOKUPRowChangeEvent(((M_LOOKUPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.M_LOOKUPRowDeleted != null)) {
                    this.M_LOOKUPRowDeleted(this, new M_LOOKUPRowChangeEvent(((M_LOOKUPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.M_LOOKUPRowDeleting != null)) {
                    this.M_LOOKUPRowDeleting(this, new M_LOOKUPRowChangeEvent(((M_LOOKUPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveM_LOOKUPRow(M_LOOKUPRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "M_LOOKUPDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class T_TASKDataTable : global::System.Data.TypedTableBase<T_TASKRow> {
            
            private global::System.Data.DataColumn columnCD_CO;
            
            private global::System.Data.DataColumn columnID_TASK;
            
            private global::System.Data.DataColumn columnCD_EMP;
            
            private global::System.Data.DataColumn columnCLS_STATUS;
            
            private global::System.Data.DataColumn columnCLS_PRIORITY;
            
            private global::System.Data.DataColumn columnTXT_DETAIL;
            
            private global::System.Data.DataColumn columnCD_CREATE;
            
            private global::System.Data.DataColumn columnDTM_CREATE;
            
            private global::System.Data.DataColumn columnCD_UPDATE;
            
            private global::System.Data.DataColumn columnDTM_UPDATE;
            
            private global::System.Data.DataColumn columnFLG_ACTIVE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public T_TASKDataTable() {
                this.TableName = "T_TASK";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal T_TASKDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected T_TASKDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_COColumn {
                get {
                    return this.columnCD_CO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_TASKColumn {
                get {
                    return this.columnID_TASK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_EMPColumn {
                get {
                    return this.columnCD_EMP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CLS_STATUSColumn {
                get {
                    return this.columnCLS_STATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CLS_PRIORITYColumn {
                get {
                    return this.columnCLS_PRIORITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TXT_DETAILColumn {
                get {
                    return this.columnTXT_DETAIL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_CREATEColumn {
                get {
                    return this.columnCD_CREATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DTM_CREATEColumn {
                get {
                    return this.columnDTM_CREATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CD_UPDATEColumn {
                get {
                    return this.columnCD_UPDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DTM_UPDATEColumn {
                get {
                    return this.columnDTM_UPDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FLG_ACTIVEColumn {
                get {
                    return this.columnFLG_ACTIVE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public T_TASKRow this[int index] {
                get {
                    return ((T_TASKRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event T_TASKRowChangeEventHandler T_TASKRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event T_TASKRowChangeEventHandler T_TASKRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event T_TASKRowChangeEventHandler T_TASKRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event T_TASKRowChangeEventHandler T_TASKRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddT_TASKRow(T_TASKRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public T_TASKRow AddT_TASKRow(string CD_CO, string ID_TASK, string CD_EMP, string CLS_STATUS, string CLS_PRIORITY, string TXT_DETAIL, string CD_CREATE, System.DateTime DTM_CREATE, string CD_UPDATE, System.DateTime DTM_UPDATE, string FLG_ACTIVE) {
                T_TASKRow rowT_TASKRow = ((T_TASKRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CD_CO,
                        ID_TASK,
                        CD_EMP,
                        CLS_STATUS,
                        CLS_PRIORITY,
                        TXT_DETAIL,
                        CD_CREATE,
                        DTM_CREATE,
                        CD_UPDATE,
                        DTM_UPDATE,
                        FLG_ACTIVE};
                rowT_TASKRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowT_TASKRow);
                return rowT_TASKRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public T_TASKRow FindByCD_COID_TASK(string CD_CO, string ID_TASK) {
                return ((T_TASKRow)(this.Rows.Find(new object[] {
                            CD_CO,
                            ID_TASK})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                T_TASKDataTable cln = ((T_TASKDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new T_TASKDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCD_CO = base.Columns["CD_CO"];
                this.columnID_TASK = base.Columns["ID_TASK"];
                this.columnCD_EMP = base.Columns["CD_EMP"];
                this.columnCLS_STATUS = base.Columns["CLS_STATUS"];
                this.columnCLS_PRIORITY = base.Columns["CLS_PRIORITY"];
                this.columnTXT_DETAIL = base.Columns["TXT_DETAIL"];
                this.columnCD_CREATE = base.Columns["CD_CREATE"];
                this.columnDTM_CREATE = base.Columns["DTM_CREATE"];
                this.columnCD_UPDATE = base.Columns["CD_UPDATE"];
                this.columnDTM_UPDATE = base.Columns["DTM_UPDATE"];
                this.columnFLG_ACTIVE = base.Columns["FLG_ACTIVE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCD_CO = new global::System.Data.DataColumn("CD_CO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_CO);
                this.columnID_TASK = new global::System.Data.DataColumn("ID_TASK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_TASK);
                this.columnCD_EMP = new global::System.Data.DataColumn("CD_EMP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_EMP);
                this.columnCLS_STATUS = new global::System.Data.DataColumn("CLS_STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLS_STATUS);
                this.columnCLS_PRIORITY = new global::System.Data.DataColumn("CLS_PRIORITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLS_PRIORITY);
                this.columnTXT_DETAIL = new global::System.Data.DataColumn("TXT_DETAIL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTXT_DETAIL);
                this.columnCD_CREATE = new global::System.Data.DataColumn("CD_CREATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_CREATE);
                this.columnDTM_CREATE = new global::System.Data.DataColumn("DTM_CREATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDTM_CREATE);
                this.columnCD_UPDATE = new global::System.Data.DataColumn("CD_UPDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCD_UPDATE);
                this.columnDTM_UPDATE = new global::System.Data.DataColumn("DTM_UPDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDTM_UPDATE);
                this.columnFLG_ACTIVE = new global::System.Data.DataColumn("FLG_ACTIVE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLG_ACTIVE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCD_CO,
                                this.columnID_TASK}, true));
                this.columnCD_CO.AllowDBNull = false;
                this.columnCD_CO.MaxLength = 30;
                this.columnID_TASK.AllowDBNull = false;
                this.columnID_TASK.MaxLength = 100;
                this.columnCD_EMP.AllowDBNull = false;
                this.columnCD_EMP.MaxLength = 30;
                this.columnCLS_STATUS.AllowDBNull = false;
                this.columnCLS_STATUS.MaxLength = 30;
                this.columnCLS_PRIORITY.AllowDBNull = false;
                this.columnCLS_PRIORITY.MaxLength = 30;
                this.columnTXT_DETAIL.MaxLength = 500;
                this.columnCD_CREATE.AllowDBNull = false;
                this.columnCD_CREATE.MaxLength = 30;
                this.columnDTM_CREATE.AllowDBNull = false;
                this.columnCD_UPDATE.AllowDBNull = false;
                this.columnCD_UPDATE.MaxLength = 30;
                this.columnDTM_UPDATE.AllowDBNull = false;
                this.columnFLG_ACTIVE.AllowDBNull = false;
                this.columnFLG_ACTIVE.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public T_TASKRow NewT_TASKRow() {
                return ((T_TASKRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new T_TASKRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(T_TASKRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.T_TASKRowChanged != null)) {
                    this.T_TASKRowChanged(this, new T_TASKRowChangeEvent(((T_TASKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.T_TASKRowChanging != null)) {
                    this.T_TASKRowChanging(this, new T_TASKRowChangeEvent(((T_TASKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.T_TASKRowDeleted != null)) {
                    this.T_TASKRowDeleted(this, new T_TASKRowChangeEvent(((T_TASKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.T_TASKRowDeleting != null)) {
                    this.T_TASKRowDeleting(this, new T_TASKRowChangeEvent(((T_TASKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveT_TASKRow(T_TASKRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet ds = new DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "T_TASKDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class M_CORow : global::System.Data.DataRow {
            
            private M_CODataTable tableM_CO;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal M_CORow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableM_CO = ((M_CODataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_CO {
                get {
                    return ((string)(this[this.tableM_CO.CD_COColumn]));
                }
                set {
                    this[this.tableM_CO.CD_COColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NM_CO {
                get {
                    return ((string)(this[this.tableM_CO.NM_COColumn]));
                }
                set {
                    this[this.tableM_CO.NM_COColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NM_CO_SHORT {
                get {
                    return ((string)(this[this.tableM_CO.NM_CO_SHORTColumn]));
                }
                set {
                    this[this.tableM_CO.NM_CO_SHORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_ZIP {
                get {
                    try {
                        return ((string)(this[this.tableM_CO.TXT_ZIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_CO\' にある列 \'TXT_ZIP\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_CO.TXT_ZIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_ADDR1 {
                get {
                    try {
                        return ((string)(this[this.tableM_CO.TXT_ADDR1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_CO\' にある列 \'TXT_ADDR1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_CO.TXT_ADDR1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_ADDR2 {
                get {
                    try {
                        return ((string)(this[this.tableM_CO.TXT_ADDR2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_CO\' にある列 \'TXT_ADDR2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_CO.TXT_ADDR2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_ADDR3 {
                get {
                    try {
                        return ((string)(this[this.tableM_CO.TXT_ADDR3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_CO\' にある列 \'TXT_ADDR3\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_CO.TXT_ADDR3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_TEL {
                get {
                    try {
                        return ((string)(this[this.tableM_CO.TXT_TELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_CO\' にある列 \'TXT_TEL\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_CO.TXT_TELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_FAX {
                get {
                    try {
                        return ((string)(this[this.tableM_CO.TXT_FAXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_CO\' にある列 \'TXT_FAX\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_CO.TXT_FAXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_REM {
                get {
                    try {
                        return ((string)(this[this.tableM_CO.TXT_REMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_CO\' にある列 \'TXT_REM\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_CO.TXT_REMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_CREATE {
                get {
                    return ((string)(this[this.tableM_CO.CD_CREATEColumn]));
                }
                set {
                    this[this.tableM_CO.CD_CREATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DTM_CREATE {
                get {
                    return ((global::System.DateTime)(this[this.tableM_CO.DTM_CREATEColumn]));
                }
                set {
                    this[this.tableM_CO.DTM_CREATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_UPDATE {
                get {
                    return ((string)(this[this.tableM_CO.CD_UPDATEColumn]));
                }
                set {
                    this[this.tableM_CO.CD_UPDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DTM_UPDATE {
                get {
                    return ((global::System.DateTime)(this[this.tableM_CO.DTM_UPDATEColumn]));
                }
                set {
                    this[this.tableM_CO.DTM_UPDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FLG_ACTIVE {
                get {
                    return ((string)(this[this.tableM_CO.FLG_ACTIVEColumn]));
                }
                set {
                    this[this.tableM_CO.FLG_ACTIVEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_ZIPNull() {
                return this.IsNull(this.tableM_CO.TXT_ZIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_ZIPNull() {
                this[this.tableM_CO.TXT_ZIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_ADDR1Null() {
                return this.IsNull(this.tableM_CO.TXT_ADDR1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_ADDR1Null() {
                this[this.tableM_CO.TXT_ADDR1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_ADDR2Null() {
                return this.IsNull(this.tableM_CO.TXT_ADDR2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_ADDR2Null() {
                this[this.tableM_CO.TXT_ADDR2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_ADDR3Null() {
                return this.IsNull(this.tableM_CO.TXT_ADDR3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_ADDR3Null() {
                this[this.tableM_CO.TXT_ADDR3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_TELNull() {
                return this.IsNull(this.tableM_CO.TXT_TELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_TELNull() {
                this[this.tableM_CO.TXT_TELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_FAXNull() {
                return this.IsNull(this.tableM_CO.TXT_FAXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_FAXNull() {
                this[this.tableM_CO.TXT_FAXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_REMNull() {
                return this.IsNull(this.tableM_CO.TXT_REMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_REMNull() {
                this[this.tableM_CO.TXT_REMColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class M_DEPTRow : global::System.Data.DataRow {
            
            private M_DEPTDataTable tableM_DEPT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal M_DEPTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableM_DEPT = ((M_DEPTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_CO {
                get {
                    return ((string)(this[this.tableM_DEPT.CD_COColumn]));
                }
                set {
                    this[this.tableM_DEPT.CD_COColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_DEPT {
                get {
                    return ((string)(this[this.tableM_DEPT.CD_DEPTColumn]));
                }
                set {
                    this[this.tableM_DEPT.CD_DEPTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NM_DEPT {
                get {
                    return ((string)(this[this.tableM_DEPT.NM_DEPTColumn]));
                }
                set {
                    this[this.tableM_DEPT.NM_DEPTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_REM {
                get {
                    try {
                        return ((string)(this[this.tableM_DEPT.TXT_REMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_DEPT\' にある列 \'TXT_REM\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_DEPT.TXT_REMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_CREATE {
                get {
                    return ((string)(this[this.tableM_DEPT.CD_CREATEColumn]));
                }
                set {
                    this[this.tableM_DEPT.CD_CREATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DTM_CREATE {
                get {
                    return ((global::System.DateTime)(this[this.tableM_DEPT.DTM_CREATEColumn]));
                }
                set {
                    this[this.tableM_DEPT.DTM_CREATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_UPDATE {
                get {
                    return ((string)(this[this.tableM_DEPT.CD_UPDATEColumn]));
                }
                set {
                    this[this.tableM_DEPT.CD_UPDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DTM_UPDATE {
                get {
                    return ((global::System.DateTime)(this[this.tableM_DEPT.DTM_UPDATEColumn]));
                }
                set {
                    this[this.tableM_DEPT.DTM_UPDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FLG_ACTIVE {
                get {
                    return ((string)(this[this.tableM_DEPT.FLG_ACTIVEColumn]));
                }
                set {
                    this[this.tableM_DEPT.FLG_ACTIVEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_REMNull() {
                return this.IsNull(this.tableM_DEPT.TXT_REMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_REMNull() {
                this[this.tableM_DEPT.TXT_REMColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class M_EMPRow : global::System.Data.DataRow {
            
            private M_EMPDataTable tableM_EMP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal M_EMPRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableM_EMP = ((M_EMPDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_CO {
                get {
                    return ((string)(this[this.tableM_EMP.CD_COColumn]));
                }
                set {
                    this[this.tableM_EMP.CD_COColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_EMP {
                get {
                    return ((string)(this[this.tableM_EMP.CD_EMPColumn]));
                }
                set {
                    this[this.tableM_EMP.CD_EMPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NM_EMP {
                get {
                    return ((string)(this[this.tableM_EMP.NM_EMPColumn]));
                }
                set {
                    this[this.tableM_EMP.NM_EMPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_PASSWD {
                get {
                    return ((string)(this[this.tableM_EMP.TXT_PASSWDColumn]));
                }
                set {
                    this[this.tableM_EMP.TXT_PASSWDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_DEPT {
                get {
                    try {
                        return ((string)(this[this.tableM_EMP.CD_DEPTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_EMP\' にある列 \'CD_DEPT\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_EMP.CD_DEPTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_ZIP {
                get {
                    try {
                        return ((string)(this[this.tableM_EMP.TXT_ZIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_EMP\' にある列 \'TXT_ZIP\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_EMP.TXT_ZIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_ADDR1 {
                get {
                    try {
                        return ((string)(this[this.tableM_EMP.TXT_ADDR1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_EMP\' にある列 \'TXT_ADDR1\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_EMP.TXT_ADDR1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_ADDR2 {
                get {
                    try {
                        return ((string)(this[this.tableM_EMP.TXT_ADDR2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_EMP\' にある列 \'TXT_ADDR2\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_EMP.TXT_ADDR2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_ADDR3 {
                get {
                    try {
                        return ((string)(this[this.tableM_EMP.TXT_ADDR3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_EMP\' にある列 \'TXT_ADDR3\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_EMP.TXT_ADDR3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_TEL {
                get {
                    try {
                        return ((string)(this[this.tableM_EMP.TXT_TELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_EMP\' にある列 \'TXT_TEL\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_EMP.TXT_TELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_FAX {
                get {
                    try {
                        return ((string)(this[this.tableM_EMP.TXT_FAXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_EMP\' にある列 \'TXT_FAX\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_EMP.TXT_FAXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_REM {
                get {
                    try {
                        return ((string)(this[this.tableM_EMP.TXT_REMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_EMP\' にある列 \'TXT_REM\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_EMP.TXT_REMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_CREATE {
                get {
                    return ((string)(this[this.tableM_EMP.CD_CREATEColumn]));
                }
                set {
                    this[this.tableM_EMP.CD_CREATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DTM_CREATE {
                get {
                    return ((global::System.DateTime)(this[this.tableM_EMP.DTM_CREATEColumn]));
                }
                set {
                    this[this.tableM_EMP.DTM_CREATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_UPDATE {
                get {
                    return ((string)(this[this.tableM_EMP.CD_UPDATEColumn]));
                }
                set {
                    this[this.tableM_EMP.CD_UPDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DTM_UPDATE {
                get {
                    return ((global::System.DateTime)(this[this.tableM_EMP.DTM_UPDATEColumn]));
                }
                set {
                    this[this.tableM_EMP.DTM_UPDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FLG_ACTIVE {
                get {
                    return ((string)(this[this.tableM_EMP.FLG_ACTIVEColumn]));
                }
                set {
                    this[this.tableM_EMP.FLG_ACTIVEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCD_DEPTNull() {
                return this.IsNull(this.tableM_EMP.CD_DEPTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCD_DEPTNull() {
                this[this.tableM_EMP.CD_DEPTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_ZIPNull() {
                return this.IsNull(this.tableM_EMP.TXT_ZIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_ZIPNull() {
                this[this.tableM_EMP.TXT_ZIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_ADDR1Null() {
                return this.IsNull(this.tableM_EMP.TXT_ADDR1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_ADDR1Null() {
                this[this.tableM_EMP.TXT_ADDR1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_ADDR2Null() {
                return this.IsNull(this.tableM_EMP.TXT_ADDR2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_ADDR2Null() {
                this[this.tableM_EMP.TXT_ADDR2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_ADDR3Null() {
                return this.IsNull(this.tableM_EMP.TXT_ADDR3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_ADDR3Null() {
                this[this.tableM_EMP.TXT_ADDR3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_TELNull() {
                return this.IsNull(this.tableM_EMP.TXT_TELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_TELNull() {
                this[this.tableM_EMP.TXT_TELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_FAXNull() {
                return this.IsNull(this.tableM_EMP.TXT_FAXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_FAXNull() {
                this[this.tableM_EMP.TXT_FAXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_REMNull() {
                return this.IsNull(this.tableM_EMP.TXT_REMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_REMNull() {
                this[this.tableM_EMP.TXT_REMColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class M_LOOKUPRow : global::System.Data.DataRow {
            
            private M_LOOKUPDataTable tableM_LOOKUP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal M_LOOKUPRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableM_LOOKUP = ((M_LOOKUPDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_CO {
                get {
                    return ((string)(this[this.tableM_LOOKUP.CD_COColumn]));
                }
                set {
                    this[this.tableM_LOOKUP.CD_COColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_LOOKUP_KEY {
                get {
                    return ((string)(this[this.tableM_LOOKUP.TXT_LOOKUP_KEYColumn]));
                }
                set {
                    this[this.tableM_LOOKUP.TXT_LOOKUP_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NM_LOOKUP {
                get {
                    return ((string)(this[this.tableM_LOOKUP.NM_LOOKUPColumn]));
                }
                set {
                    this[this.tableM_LOOKUP.NM_LOOKUPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_LOOKUP_TYPE {
                get {
                    return ((string)(this[this.tableM_LOOKUP.CD_LOOKUP_TYPEColumn]));
                }
                set {
                    this[this.tableM_LOOKUP.CD_LOOKUP_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_LOOKUP {
                get {
                    return ((string)(this[this.tableM_LOOKUP.CD_LOOKUPColumn]));
                }
                set {
                    this[this.tableM_LOOKUP.CD_LOOKUPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal N_SORT {
                get {
                    return ((decimal)(this[this.tableM_LOOKUP.N_SORTColumn]));
                }
                set {
                    this[this.tableM_LOOKUP.N_SORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_REM {
                get {
                    try {
                        return ((string)(this[this.tableM_LOOKUP.TXT_REMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'M_LOOKUP\' にある列 \'TXT_REM\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableM_LOOKUP.TXT_REMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_CREATE {
                get {
                    return ((string)(this[this.tableM_LOOKUP.CD_CREATEColumn]));
                }
                set {
                    this[this.tableM_LOOKUP.CD_CREATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DTM_CREATE {
                get {
                    return ((global::System.DateTime)(this[this.tableM_LOOKUP.DTM_CREATEColumn]));
                }
                set {
                    this[this.tableM_LOOKUP.DTM_CREATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_UPDATE {
                get {
                    return ((string)(this[this.tableM_LOOKUP.CD_UPDATEColumn]));
                }
                set {
                    this[this.tableM_LOOKUP.CD_UPDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DTM_UPDATE {
                get {
                    return ((global::System.DateTime)(this[this.tableM_LOOKUP.DTM_UPDATEColumn]));
                }
                set {
                    this[this.tableM_LOOKUP.DTM_UPDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FLG_ACTIVE {
                get {
                    return ((string)(this[this.tableM_LOOKUP.FLG_ACTIVEColumn]));
                }
                set {
                    this[this.tableM_LOOKUP.FLG_ACTIVEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_REMNull() {
                return this.IsNull(this.tableM_LOOKUP.TXT_REMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_REMNull() {
                this[this.tableM_LOOKUP.TXT_REMColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class T_TASKRow : global::System.Data.DataRow {
            
            private T_TASKDataTable tableT_TASK;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal T_TASKRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableT_TASK = ((T_TASKDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_CO {
                get {
                    return ((string)(this[this.tableT_TASK.CD_COColumn]));
                }
                set {
                    this[this.tableT_TASK.CD_COColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ID_TASK {
                get {
                    return ((string)(this[this.tableT_TASK.ID_TASKColumn]));
                }
                set {
                    this[this.tableT_TASK.ID_TASKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_EMP {
                get {
                    return ((string)(this[this.tableT_TASK.CD_EMPColumn]));
                }
                set {
                    this[this.tableT_TASK.CD_EMPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CLS_STATUS {
                get {
                    return ((string)(this[this.tableT_TASK.CLS_STATUSColumn]));
                }
                set {
                    this[this.tableT_TASK.CLS_STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CLS_PRIORITY {
                get {
                    return ((string)(this[this.tableT_TASK.CLS_PRIORITYColumn]));
                }
                set {
                    this[this.tableT_TASK.CLS_PRIORITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TXT_DETAIL {
                get {
                    try {
                        return ((string)(this[this.tableT_TASK.TXT_DETAILColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'T_TASK\' にある列 \'TXT_DETAIL\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableT_TASK.TXT_DETAILColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_CREATE {
                get {
                    return ((string)(this[this.tableT_TASK.CD_CREATEColumn]));
                }
                set {
                    this[this.tableT_TASK.CD_CREATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DTM_CREATE {
                get {
                    return ((global::System.DateTime)(this[this.tableT_TASK.DTM_CREATEColumn]));
                }
                set {
                    this[this.tableT_TASK.DTM_CREATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CD_UPDATE {
                get {
                    return ((string)(this[this.tableT_TASK.CD_UPDATEColumn]));
                }
                set {
                    this[this.tableT_TASK.CD_UPDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DTM_UPDATE {
                get {
                    return ((global::System.DateTime)(this[this.tableT_TASK.DTM_UPDATEColumn]));
                }
                set {
                    this[this.tableT_TASK.DTM_UPDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FLG_ACTIVE {
                get {
                    return ((string)(this[this.tableT_TASK.FLG_ACTIVEColumn]));
                }
                set {
                    this[this.tableT_TASK.FLG_ACTIVEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTXT_DETAILNull() {
                return this.IsNull(this.tableT_TASK.TXT_DETAILColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTXT_DETAILNull() {
                this[this.tableT_TASK.TXT_DETAILColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class M_CORowChangeEvent : global::System.EventArgs {
            
            private M_CORow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_CORowChangeEvent(M_CORow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_CORow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class M_DEPTRowChangeEvent : global::System.EventArgs {
            
            private M_DEPTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_DEPTRowChangeEvent(M_DEPTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_DEPTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class M_EMPRowChangeEvent : global::System.EventArgs {
            
            private M_EMPRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_EMPRowChangeEvent(M_EMPRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_EMPRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class M_LOOKUPRowChangeEvent : global::System.EventArgs {
            
            private M_LOOKUPRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_LOOKUPRowChangeEvent(M_LOOKUPRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public M_LOOKUPRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class T_TASKRowChangeEvent : global::System.EventArgs {
            
            private T_TASKRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public T_TASKRowChangeEvent(T_TASKRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public T_TASKRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace MembersListManagementProgram.DataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class M_COTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleTransaction _transaction;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public M_COTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "M_CO";
            tableMapping.ColumnMappings.Add("CD_CO", "CD_CO");
            tableMapping.ColumnMappings.Add("NM_CO", "NM_CO");
            tableMapping.ColumnMappings.Add("NM_CO_SHORT", "NM_CO_SHORT");
            tableMapping.ColumnMappings.Add("TXT_ZIP", "TXT_ZIP");
            tableMapping.ColumnMappings.Add("TXT_ADDR1", "TXT_ADDR1");
            tableMapping.ColumnMappings.Add("TXT_ADDR2", "TXT_ADDR2");
            tableMapping.ColumnMappings.Add("TXT_ADDR3", "TXT_ADDR3");
            tableMapping.ColumnMappings.Add("TXT_TEL", "TXT_TEL");
            tableMapping.ColumnMappings.Add("TXT_FAX", "TXT_FAX");
            tableMapping.ColumnMappings.Add("TXT_REM", "TXT_REM");
            tableMapping.ColumnMappings.Add("CD_CREATE", "CD_CREATE");
            tableMapping.ColumnMappings.Add("DTM_CREATE", "DTM_CREATE");
            tableMapping.ColumnMappings.Add("CD_UPDATE", "CD_UPDATE");
            tableMapping.ColumnMappings.Add("DTM_UPDATE", "DTM_UPDATE");
            tableMapping.ColumnMappings.Add("FLG_ACTIVE", "FLG_ACTIVE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""TASK"".""M_CO"" WHERE ((""CD_CO"" = :Original_CD_CO) AND (""NM_CO"" = :Original_NM_CO) AND (""NM_CO_SHORT"" = :Original_NM_CO_SHORT) AND ((:IsNull_TXT_ZIP = 1 AND ""TXT_ZIP"" IS NULL) OR (""TXT_ZIP"" = :Original_TXT_ZIP)) AND ((:IsNull_TXT_ADDR1 = 1 AND ""TXT_ADDR1"" IS NULL) OR (""TXT_ADDR1"" = :Original_TXT_ADDR1)) AND ((:IsNull_TXT_ADDR2 = 1 AND ""TXT_ADDR2"" IS NULL) OR (""TXT_ADDR2"" = :Original_TXT_ADDR2)) AND ((:IsNull_TXT_ADDR3 = 1 AND ""TXT_ADDR3"" IS NULL) OR (""TXT_ADDR3"" = :Original_TXT_ADDR3)) AND ((:IsNull_TXT_TEL = 1 AND ""TXT_TEL"" IS NULL) OR (""TXT_TEL"" = :Original_TXT_TEL)) AND ((:IsNull_TXT_FAX = 1 AND ""TXT_FAX"" IS NULL) OR (""TXT_FAX"" = :Original_TXT_FAX)) AND ((:IsNull_TXT_REM = 1 AND ""TXT_REM"" IS NULL) OR (""TXT_REM"" = :Original_TXT_REM)) AND (""CD_CREATE"" = :Original_CD_CREATE) AND (""DTM_CREATE"" = :Original_DTM_CREATE) AND (""CD_UPDATE"" = :Original_CD_UPDATE) AND (""DTM_UPDATE"" = :Original_DTM_UPDATE) AND (""FLG_ACTIVE"" = :Original_FLG_ACTIVE))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_NM_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_CO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_NM_CO_SHORT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_CO_SHORT", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ZIP", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ZIP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ZIP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ZIP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ADDR1", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR1", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ADDR1", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR1", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ADDR2", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ADDR2", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ADDR3", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR3", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ADDR3", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR3", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_TEL", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_TEL", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_TEL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_TEL", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_FAX", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_FAX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_FAX", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_FAX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_REM", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""TASK"".""M_CO"" (""CD_CO"", ""NM_CO"", ""NM_CO_SHORT"", ""TXT_ZIP"", ""TXT_ADDR1"", ""TXT_ADDR2"", ""TXT_ADDR3"", ""TXT_TEL"", ""TXT_FAX"", ""TXT_REM"", ""CD_CREATE"", ""DTM_CREATE"", ""CD_UPDATE"", ""DTM_UPDATE"", ""FLG_ACTIVE"") VALUES (:CD_CO, :NM_CO, :NM_CO_SHORT, :TXT_ZIP, :TXT_ADDR1, :TXT_ADDR2, :TXT_ADDR3, :TXT_TEL, :TXT_FAX, :TXT_REM, :CD_CREATE, :DTM_CREATE, :CD_UPDATE, :DTM_UPDATE, :FLG_ACTIVE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("NM_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_CO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("NM_CO_SHORT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_CO_SHORT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ZIP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ZIP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ADDR1", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR1", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ADDR2", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ADDR3", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR3", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_TEL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_TEL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_FAX", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_FAX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""TASK"".""M_CO"" SET ""CD_CO"" = :CD_CO, ""NM_CO"" = :NM_CO, ""NM_CO_SHORT"" = :NM_CO_SHORT, ""TXT_ZIP"" = :TXT_ZIP, ""TXT_ADDR1"" = :TXT_ADDR1, ""TXT_ADDR2"" = :TXT_ADDR2, ""TXT_ADDR3"" = :TXT_ADDR3, ""TXT_TEL"" = :TXT_TEL, ""TXT_FAX"" = :TXT_FAX, ""TXT_REM"" = :TXT_REM, ""CD_CREATE"" = :CD_CREATE, ""DTM_CREATE"" = :DTM_CREATE, ""CD_UPDATE"" = :CD_UPDATE, ""DTM_UPDATE"" = :DTM_UPDATE, ""FLG_ACTIVE"" = :FLG_ACTIVE WHERE ((""CD_CO"" = :Original_CD_CO) AND (""NM_CO"" = :Original_NM_CO) AND (""NM_CO_SHORT"" = :Original_NM_CO_SHORT) AND ((:IsNull_TXT_ZIP = 1 AND ""TXT_ZIP"" IS NULL) OR (""TXT_ZIP"" = :Original_TXT_ZIP)) AND ((:IsNull_TXT_ADDR1 = 1 AND ""TXT_ADDR1"" IS NULL) OR (""TXT_ADDR1"" = :Original_TXT_ADDR1)) AND ((:IsNull_TXT_ADDR2 = 1 AND ""TXT_ADDR2"" IS NULL) OR (""TXT_ADDR2"" = :Original_TXT_ADDR2)) AND ((:IsNull_TXT_ADDR3 = 1 AND ""TXT_ADDR3"" IS NULL) OR (""TXT_ADDR3"" = :Original_TXT_ADDR3)) AND ((:IsNull_TXT_TEL = 1 AND ""TXT_TEL"" IS NULL) OR (""TXT_TEL"" = :Original_TXT_TEL)) AND ((:IsNull_TXT_FAX = 1 AND ""TXT_FAX"" IS NULL) OR (""TXT_FAX"" = :Original_TXT_FAX)) AND ((:IsNull_TXT_REM = 1 AND ""TXT_REM"" IS NULL) OR (""TXT_REM"" = :Original_TXT_REM)) AND (""CD_CREATE"" = :Original_CD_CREATE) AND (""DTM_CREATE"" = :Original_DTM_CREATE) AND (""CD_UPDATE"" = :Original_CD_UPDATE) AND (""DTM_UPDATE"" = :Original_DTM_UPDATE) AND (""FLG_ACTIVE"" = :Original_FLG_ACTIVE))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("NM_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_CO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("NM_CO_SHORT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_CO_SHORT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ZIP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ZIP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ADDR1", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR1", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ADDR2", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ADDR3", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR3", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_TEL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_TEL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_FAX", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_FAX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_NM_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_CO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_NM_CO_SHORT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_CO_SHORT", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ZIP", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ZIP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ZIP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ZIP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ADDR1", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR1", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ADDR1", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR1", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ADDR2", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ADDR2", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ADDR3", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR3", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ADDR3", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR3", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_TEL", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_TEL", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_TEL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_TEL", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_FAX", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_FAX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_FAX", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_FAX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_REM", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::MembersListManagementProgram.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CD_CO, NM_CO, NM_CO_SHORT, TXT_ZIP, TXT_ADDR1, TXT_ADDR2, TXT_ADDR3, TXT_T" +
                "EL, TXT_FAX, TXT_REM, CD_CREATE, DTM_CREATE, CD_UPDATE, DTM_UPDATE, FLG_ACTIVE F" +
                "ROM TASK.M_CO";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.M_CODataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.M_CODataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.M_CODataTable dataTable = new DataSet.M_CODataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.M_CODataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "M_CO");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CD_CO, string Original_NM_CO, string Original_NM_CO_SHORT, string Original_TXT_ZIP, string Original_TXT_ADDR1, string Original_TXT_ADDR2, string Original_TXT_ADDR3, string Original_TXT_TEL, string Original_TXT_FAX, string Original_TXT_REM, string Original_CD_CREATE, System.DateTime Original_DTM_CREATE, string Original_CD_UPDATE, System.DateTime Original_DTM_UPDATE, string Original_FLG_ACTIVE) {
            if ((Original_CD_CO == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CO");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CD_CO));
            }
            if ((Original_NM_CO == null)) {
                throw new global::System.ArgumentNullException("Original_NM_CO");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_NM_CO));
            }
            if ((Original_NM_CO_SHORT == null)) {
                throw new global::System.ArgumentNullException("Original_NM_CO_SHORT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_NM_CO_SHORT));
            }
            if ((Original_TXT_ZIP == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_TXT_ZIP));
            }
            if ((Original_TXT_ADDR1 == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_TXT_ADDR1));
            }
            if ((Original_TXT_ADDR2 == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_TXT_ADDR2));
            }
            if ((Original_TXT_ADDR3 == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_TXT_ADDR3));
            }
            if ((Original_TXT_TEL == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_TXT_TEL));
            }
            if ((Original_TXT_FAX == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_TXT_FAX));
            }
            if ((Original_TXT_REM == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_TXT_REM));
            }
            if ((Original_CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CREATE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_CD_CREATE));
            }
            this.Adapter.DeleteCommand.Parameters[18].Value = ((System.DateTime)(Original_DTM_CREATE));
            if ((Original_CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_UPDATE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_CD_UPDATE));
            }
            this.Adapter.DeleteCommand.Parameters[20].Value = ((System.DateTime)(Original_DTM_UPDATE));
            if ((Original_FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("Original_FLG_ACTIVE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_FLG_ACTIVE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CD_CO, string NM_CO, string NM_CO_SHORT, string TXT_ZIP, string TXT_ADDR1, string TXT_ADDR2, string TXT_ADDR3, string TXT_TEL, string TXT_FAX, string TXT_REM, string CD_CREATE, System.DateTime DTM_CREATE, string CD_UPDATE, System.DateTime DTM_UPDATE, string FLG_ACTIVE) {
            if ((CD_CO == null)) {
                throw new global::System.ArgumentNullException("CD_CO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CD_CO));
            }
            if ((NM_CO == null)) {
                throw new global::System.ArgumentNullException("NM_CO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NM_CO));
            }
            if ((NM_CO_SHORT == null)) {
                throw new global::System.ArgumentNullException("NM_CO_SHORT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(NM_CO_SHORT));
            }
            if ((TXT_ZIP == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TXT_ZIP));
            }
            if ((TXT_ADDR1 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(TXT_ADDR1));
            }
            if ((TXT_ADDR2 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(TXT_ADDR2));
            }
            if ((TXT_ADDR3 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(TXT_ADDR3));
            }
            if ((TXT_TEL == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(TXT_TEL));
            }
            if ((TXT_FAX == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(TXT_FAX));
            }
            if ((TXT_REM == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(TXT_REM));
            }
            if ((CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("CD_CREATE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(CD_CREATE));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((System.DateTime)(DTM_CREATE));
            if ((CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("CD_UPDATE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(CD_UPDATE));
            }
            this.Adapter.InsertCommand.Parameters[13].Value = ((System.DateTime)(DTM_UPDATE));
            if ((FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("FLG_ACTIVE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(FLG_ACTIVE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string CD_CO, 
                    string NM_CO, 
                    string NM_CO_SHORT, 
                    string TXT_ZIP, 
                    string TXT_ADDR1, 
                    string TXT_ADDR2, 
                    string TXT_ADDR3, 
                    string TXT_TEL, 
                    string TXT_FAX, 
                    string TXT_REM, 
                    string CD_CREATE, 
                    System.DateTime DTM_CREATE, 
                    string CD_UPDATE, 
                    System.DateTime DTM_UPDATE, 
                    string FLG_ACTIVE, 
                    string Original_CD_CO, 
                    string Original_NM_CO, 
                    string Original_NM_CO_SHORT, 
                    string Original_TXT_ZIP, 
                    string Original_TXT_ADDR1, 
                    string Original_TXT_ADDR2, 
                    string Original_TXT_ADDR3, 
                    string Original_TXT_TEL, 
                    string Original_TXT_FAX, 
                    string Original_TXT_REM, 
                    string Original_CD_CREATE, 
                    System.DateTime Original_DTM_CREATE, 
                    string Original_CD_UPDATE, 
                    System.DateTime Original_DTM_UPDATE, 
                    string Original_FLG_ACTIVE) {
            if ((CD_CO == null)) {
                throw new global::System.ArgumentNullException("CD_CO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CD_CO));
            }
            if ((NM_CO == null)) {
                throw new global::System.ArgumentNullException("NM_CO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NM_CO));
            }
            if ((NM_CO_SHORT == null)) {
                throw new global::System.ArgumentNullException("NM_CO_SHORT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(NM_CO_SHORT));
            }
            if ((TXT_ZIP == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TXT_ZIP));
            }
            if ((TXT_ADDR1 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(TXT_ADDR1));
            }
            if ((TXT_ADDR2 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(TXT_ADDR2));
            }
            if ((TXT_ADDR3 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(TXT_ADDR3));
            }
            if ((TXT_TEL == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(TXT_TEL));
            }
            if ((TXT_FAX == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(TXT_FAX));
            }
            if ((TXT_REM == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(TXT_REM));
            }
            if ((CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("CD_CREATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(CD_CREATE));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(DTM_CREATE));
            if ((CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("CD_UPDATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(CD_UPDATE));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(DTM_UPDATE));
            if ((FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("FLG_ACTIVE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(FLG_ACTIVE));
            }
            if ((Original_CD_CO == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_CD_CO));
            }
            if ((Original_NM_CO == null)) {
                throw new global::System.ArgumentNullException("Original_NM_CO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_NM_CO));
            }
            if ((Original_NM_CO_SHORT == null)) {
                throw new global::System.ArgumentNullException("Original_NM_CO_SHORT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_NM_CO_SHORT));
            }
            if ((Original_TXT_ZIP == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_TXT_ZIP));
            }
            if ((Original_TXT_ADDR1 == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_TXT_ADDR1));
            }
            if ((Original_TXT_ADDR2 == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_TXT_ADDR2));
            }
            if ((Original_TXT_ADDR3 == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_TXT_ADDR3));
            }
            if ((Original_TXT_TEL == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_TXT_TEL));
            }
            if ((Original_TXT_FAX == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_TXT_FAX));
            }
            if ((Original_TXT_REM == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_TXT_REM));
            }
            if ((Original_CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CREATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_CD_CREATE));
            }
            this.Adapter.UpdateCommand.Parameters[33].Value = ((System.DateTime)(Original_DTM_CREATE));
            if ((Original_CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_UPDATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_CD_UPDATE));
            }
            this.Adapter.UpdateCommand.Parameters[35].Value = ((System.DateTime)(Original_DTM_UPDATE));
            if ((Original_FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("Original_FLG_ACTIVE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_FLG_ACTIVE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string NM_CO, 
                    string NM_CO_SHORT, 
                    string TXT_ZIP, 
                    string TXT_ADDR1, 
                    string TXT_ADDR2, 
                    string TXT_ADDR3, 
                    string TXT_TEL, 
                    string TXT_FAX, 
                    string TXT_REM, 
                    string CD_CREATE, 
                    System.DateTime DTM_CREATE, 
                    string CD_UPDATE, 
                    System.DateTime DTM_UPDATE, 
                    string FLG_ACTIVE, 
                    string Original_CD_CO, 
                    string Original_NM_CO, 
                    string Original_NM_CO_SHORT, 
                    string Original_TXT_ZIP, 
                    string Original_TXT_ADDR1, 
                    string Original_TXT_ADDR2, 
                    string Original_TXT_ADDR3, 
                    string Original_TXT_TEL, 
                    string Original_TXT_FAX, 
                    string Original_TXT_REM, 
                    string Original_CD_CREATE, 
                    System.DateTime Original_DTM_CREATE, 
                    string Original_CD_UPDATE, 
                    System.DateTime Original_DTM_UPDATE, 
                    string Original_FLG_ACTIVE) {
            return this.Update(Original_CD_CO, NM_CO, NM_CO_SHORT, TXT_ZIP, TXT_ADDR1, TXT_ADDR2, TXT_ADDR3, TXT_TEL, TXT_FAX, TXT_REM, CD_CREATE, DTM_CREATE, CD_UPDATE, DTM_UPDATE, FLG_ACTIVE, Original_CD_CO, Original_NM_CO, Original_NM_CO_SHORT, Original_TXT_ZIP, Original_TXT_ADDR1, Original_TXT_ADDR2, Original_TXT_ADDR3, Original_TXT_TEL, Original_TXT_FAX, Original_TXT_REM, Original_CD_CREATE, Original_DTM_CREATE, Original_CD_UPDATE, Original_DTM_UPDATE, Original_FLG_ACTIVE);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class M_DEPTTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleTransaction _transaction;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public M_DEPTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "M_DEPT";
            tableMapping.ColumnMappings.Add("CD_CO", "CD_CO");
            tableMapping.ColumnMappings.Add("CD_DEPT", "CD_DEPT");
            tableMapping.ColumnMappings.Add("NM_DEPT", "NM_DEPT");
            tableMapping.ColumnMappings.Add("TXT_REM", "TXT_REM");
            tableMapping.ColumnMappings.Add("CD_CREATE", "CD_CREATE");
            tableMapping.ColumnMappings.Add("DTM_CREATE", "DTM_CREATE");
            tableMapping.ColumnMappings.Add("CD_UPDATE", "CD_UPDATE");
            tableMapping.ColumnMappings.Add("DTM_UPDATE", "DTM_UPDATE");
            tableMapping.ColumnMappings.Add("FLG_ACTIVE", "FLG_ACTIVE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""TASK"".""M_DEPT"" WHERE ((""CD_CO"" = :Original_CD_CO) AND (""CD_DEPT"" = :Original_CD_DEPT) AND (""NM_DEPT"" = :Original_NM_DEPT) AND ((:IsNull_TXT_REM = 1 AND ""TXT_REM"" IS NULL) OR (""TXT_REM"" = :Original_TXT_REM)) AND (""CD_CREATE"" = :Original_CD_CREATE) AND (""DTM_CREATE"" = :Original_DTM_CREATE) AND (""CD_UPDATE"" = :Original_CD_UPDATE) AND (""DTM_UPDATE"" = :Original_DTM_UPDATE) AND (""FLG_ACTIVE"" = :Original_FLG_ACTIVE))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_DEPT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_DEPT", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_NM_DEPT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_DEPT", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_REM", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"TASK\".\"M_DEPT\" (\"CD_CO\", \"CD_DEPT\", \"NM_DEPT\", \"TXT_REM\", \"CD_CREATE" +
                "\", \"DTM_CREATE\", \"CD_UPDATE\", \"DTM_UPDATE\", \"FLG_ACTIVE\") VALUES (:CD_CO, :CD_DE" +
                "PT, :NM_DEPT, :TXT_REM, :CD_CREATE, :DTM_CREATE, :CD_UPDATE, :DTM_UPDATE, :FLG_A" +
                "CTIVE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_DEPT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_DEPT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("NM_DEPT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_DEPT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""TASK"".""M_DEPT"" SET ""CD_CO"" = :CD_CO, ""CD_DEPT"" = :CD_DEPT, ""NM_DEPT"" = :NM_DEPT, ""TXT_REM"" = :TXT_REM, ""CD_CREATE"" = :CD_CREATE, ""DTM_CREATE"" = :DTM_CREATE, ""CD_UPDATE"" = :CD_UPDATE, ""DTM_UPDATE"" = :DTM_UPDATE, ""FLG_ACTIVE"" = :FLG_ACTIVE WHERE ((""CD_CO"" = :Original_CD_CO) AND (""CD_DEPT"" = :Original_CD_DEPT) AND (""NM_DEPT"" = :Original_NM_DEPT) AND ((:IsNull_TXT_REM = 1 AND ""TXT_REM"" IS NULL) OR (""TXT_REM"" = :Original_TXT_REM)) AND (""CD_CREATE"" = :Original_CD_CREATE) AND (""DTM_CREATE"" = :Original_DTM_CREATE) AND (""CD_UPDATE"" = :Original_CD_UPDATE) AND (""DTM_UPDATE"" = :Original_DTM_UPDATE) AND (""FLG_ACTIVE"" = :Original_FLG_ACTIVE))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_DEPT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_DEPT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("NM_DEPT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_DEPT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_DEPT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_DEPT", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_NM_DEPT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_DEPT", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_REM", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::MembersListManagementProgram.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CD_CO, CD_DEPT, NM_DEPT, TXT_REM, CD_CREATE, DTM_CREATE, CD_UPDATE, DTM_UP" +
                "DATE, FLG_ACTIVE FROM TASK.M_DEPT";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.M_DEPTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.M_DEPTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.M_DEPTDataTable dataTable = new DataSet.M_DEPTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.M_DEPTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "M_DEPT");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CD_CO, string Original_CD_DEPT, string Original_NM_DEPT, string Original_TXT_REM, string Original_CD_CREATE, System.DateTime Original_DTM_CREATE, string Original_CD_UPDATE, System.DateTime Original_DTM_UPDATE, string Original_FLG_ACTIVE) {
            if ((Original_CD_CO == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CO");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CD_CO));
            }
            if ((Original_CD_DEPT == null)) {
                throw new global::System.ArgumentNullException("Original_CD_DEPT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CD_DEPT));
            }
            if ((Original_NM_DEPT == null)) {
                throw new global::System.ArgumentNullException("Original_NM_DEPT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_NM_DEPT));
            }
            if ((Original_TXT_REM == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_TXT_REM));
            }
            if ((Original_CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CREATE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_CD_CREATE));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_DTM_CREATE));
            if ((Original_CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_UPDATE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_CD_UPDATE));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_DTM_UPDATE));
            if ((Original_FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("Original_FLG_ACTIVE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_FLG_ACTIVE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CD_CO, string CD_DEPT, string NM_DEPT, string TXT_REM, string CD_CREATE, System.DateTime DTM_CREATE, string CD_UPDATE, System.DateTime DTM_UPDATE, string FLG_ACTIVE) {
            if ((CD_CO == null)) {
                throw new global::System.ArgumentNullException("CD_CO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CD_CO));
            }
            if ((CD_DEPT == null)) {
                throw new global::System.ArgumentNullException("CD_DEPT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(CD_DEPT));
            }
            if ((NM_DEPT == null)) {
                throw new global::System.ArgumentNullException("NM_DEPT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(NM_DEPT));
            }
            if ((TXT_REM == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TXT_REM));
            }
            if ((CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("CD_CREATE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(CD_CREATE));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(DTM_CREATE));
            if ((CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("CD_UPDATE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(CD_UPDATE));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(DTM_UPDATE));
            if ((FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("FLG_ACTIVE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(FLG_ACTIVE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string CD_CO, 
                    string CD_DEPT, 
                    string NM_DEPT, 
                    string TXT_REM, 
                    string CD_CREATE, 
                    System.DateTime DTM_CREATE, 
                    string CD_UPDATE, 
                    System.DateTime DTM_UPDATE, 
                    string FLG_ACTIVE, 
                    string Original_CD_CO, 
                    string Original_CD_DEPT, 
                    string Original_NM_DEPT, 
                    string Original_TXT_REM, 
                    string Original_CD_CREATE, 
                    System.DateTime Original_DTM_CREATE, 
                    string Original_CD_UPDATE, 
                    System.DateTime Original_DTM_UPDATE, 
                    string Original_FLG_ACTIVE) {
            if ((CD_CO == null)) {
                throw new global::System.ArgumentNullException("CD_CO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CD_CO));
            }
            if ((CD_DEPT == null)) {
                throw new global::System.ArgumentNullException("CD_DEPT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(CD_DEPT));
            }
            if ((NM_DEPT == null)) {
                throw new global::System.ArgumentNullException("NM_DEPT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(NM_DEPT));
            }
            if ((TXT_REM == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TXT_REM));
            }
            if ((CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("CD_CREATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(CD_CREATE));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(DTM_CREATE));
            if ((CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("CD_UPDATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(CD_UPDATE));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(DTM_UPDATE));
            if ((FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("FLG_ACTIVE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(FLG_ACTIVE));
            }
            if ((Original_CD_CO == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_CD_CO));
            }
            if ((Original_CD_DEPT == null)) {
                throw new global::System.ArgumentNullException("Original_CD_DEPT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_CD_DEPT));
            }
            if ((Original_NM_DEPT == null)) {
                throw new global::System.ArgumentNullException("Original_NM_DEPT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_NM_DEPT));
            }
            if ((Original_TXT_REM == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_TXT_REM));
            }
            if ((Original_CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CREATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_CD_CREATE));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(Original_DTM_CREATE));
            if ((Original_CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_UPDATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_CD_UPDATE));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(Original_DTM_UPDATE));
            if ((Original_FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("Original_FLG_ACTIVE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_FLG_ACTIVE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string NM_DEPT, 
                    string TXT_REM, 
                    string CD_CREATE, 
                    System.DateTime DTM_CREATE, 
                    string CD_UPDATE, 
                    System.DateTime DTM_UPDATE, 
                    string FLG_ACTIVE, 
                    string Original_CD_CO, 
                    string Original_CD_DEPT, 
                    string Original_NM_DEPT, 
                    string Original_TXT_REM, 
                    string Original_CD_CREATE, 
                    System.DateTime Original_DTM_CREATE, 
                    string Original_CD_UPDATE, 
                    System.DateTime Original_DTM_UPDATE, 
                    string Original_FLG_ACTIVE) {
            return this.Update(Original_CD_CO, Original_CD_DEPT, NM_DEPT, TXT_REM, CD_CREATE, DTM_CREATE, CD_UPDATE, DTM_UPDATE, FLG_ACTIVE, Original_CD_CO, Original_CD_DEPT, Original_NM_DEPT, Original_TXT_REM, Original_CD_CREATE, Original_DTM_CREATE, Original_CD_UPDATE, Original_DTM_UPDATE, Original_FLG_ACTIVE);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class M_EMPTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleTransaction _transaction;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public M_EMPTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "M_EMP";
            tableMapping.ColumnMappings.Add("CD_CO", "CD_CO");
            tableMapping.ColumnMappings.Add("CD_EMP", "CD_EMP");
            tableMapping.ColumnMappings.Add("NM_EMP", "NM_EMP");
            tableMapping.ColumnMappings.Add("TXT_PASSWD", "TXT_PASSWD");
            tableMapping.ColumnMappings.Add("CD_DEPT", "CD_DEPT");
            tableMapping.ColumnMappings.Add("TXT_ZIP", "TXT_ZIP");
            tableMapping.ColumnMappings.Add("TXT_ADDR1", "TXT_ADDR1");
            tableMapping.ColumnMappings.Add("TXT_ADDR2", "TXT_ADDR2");
            tableMapping.ColumnMappings.Add("TXT_ADDR3", "TXT_ADDR3");
            tableMapping.ColumnMappings.Add("TXT_TEL", "TXT_TEL");
            tableMapping.ColumnMappings.Add("TXT_FAX", "TXT_FAX");
            tableMapping.ColumnMappings.Add("TXT_REM", "TXT_REM");
            tableMapping.ColumnMappings.Add("CD_CREATE", "CD_CREATE");
            tableMapping.ColumnMappings.Add("DTM_CREATE", "DTM_CREATE");
            tableMapping.ColumnMappings.Add("CD_UPDATE", "CD_UPDATE");
            tableMapping.ColumnMappings.Add("DTM_UPDATE", "DTM_UPDATE");
            tableMapping.ColumnMappings.Add("FLG_ACTIVE", "FLG_ACTIVE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""TASK"".""M_EMP"" WHERE ((""CD_CO"" = :Original_CD_CO) AND (""CD_EMP"" = :Original_CD_EMP) AND (""NM_EMP"" = :Original_NM_EMP) AND (""TXT_PASSWD"" = :Original_TXT_PASSWD) AND ((:IsNull_CD_DEPT = 1 AND ""CD_DEPT"" IS NULL) OR (""CD_DEPT"" = :Original_CD_DEPT)) AND ((:IsNull_TXT_ZIP = 1 AND ""TXT_ZIP"" IS NULL) OR (""TXT_ZIP"" = :Original_TXT_ZIP)) AND ((:IsNull_TXT_ADDR1 = 1 AND ""TXT_ADDR1"" IS NULL) OR (""TXT_ADDR1"" = :Original_TXT_ADDR1)) AND ((:IsNull_TXT_ADDR2 = 1 AND ""TXT_ADDR2"" IS NULL) OR (""TXT_ADDR2"" = :Original_TXT_ADDR2)) AND ((:IsNull_TXT_ADDR3 = 1 AND ""TXT_ADDR3"" IS NULL) OR (""TXT_ADDR3"" = :Original_TXT_ADDR3)) AND ((:IsNull_TXT_TEL = 1 AND ""TXT_TEL"" IS NULL) OR (""TXT_TEL"" = :Original_TXT_TEL)) AND ((:IsNull_TXT_FAX = 1 AND ""TXT_FAX"" IS NULL) OR (""TXT_FAX"" = :Original_TXT_FAX)) AND ((:IsNull_TXT_REM = 1 AND ""TXT_REM"" IS NULL) OR (""TXT_REM"" = :Original_TXT_REM)) AND (""CD_CREATE"" = :Original_CD_CREATE) AND (""DTM_CREATE"" = :Original_DTM_CREATE) AND (""CD_UPDATE"" = :Original_CD_UPDATE) AND (""DTM_UPDATE"" = :Original_DTM_UPDATE) AND (""FLG_ACTIVE"" = :Original_FLG_ACTIVE))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_EMP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_EMP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_NM_EMP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_EMP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_PASSWD", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_PASSWD", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_CD_DEPT", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "CD_DEPT", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_DEPT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_DEPT", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ZIP", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ZIP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ZIP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ZIP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ADDR1", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR1", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ADDR1", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR1", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ADDR2", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ADDR2", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ADDR3", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR3", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ADDR3", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR3", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_TEL", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_TEL", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_TEL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_TEL", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_FAX", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_FAX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_FAX", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_FAX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_REM", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""TASK"".""M_EMP"" (""CD_CO"", ""CD_EMP"", ""NM_EMP"", ""TXT_PASSWD"", ""CD_DEPT"", ""TXT_ZIP"", ""TXT_ADDR1"", ""TXT_ADDR2"", ""TXT_ADDR3"", ""TXT_TEL"", ""TXT_FAX"", ""TXT_REM"", ""CD_CREATE"", ""DTM_CREATE"", ""CD_UPDATE"", ""DTM_UPDATE"", ""FLG_ACTIVE"") VALUES (:CD_CO, :CD_EMP, :NM_EMP, :TXT_PASSWD, :CD_DEPT, :TXT_ZIP, :TXT_ADDR1, :TXT_ADDR2, :TXT_ADDR3, :TXT_TEL, :TXT_FAX, :TXT_REM, :CD_CREATE, :DTM_CREATE, :CD_UPDATE, :DTM_UPDATE, :FLG_ACTIVE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_EMP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_EMP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("NM_EMP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_EMP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_PASSWD", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_PASSWD", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_DEPT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_DEPT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ZIP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ZIP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ADDR1", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR1", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ADDR2", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ADDR3", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR3", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_TEL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_TEL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_FAX", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_FAX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""TASK"".""M_EMP"" SET ""CD_CO"" = :CD_CO, ""CD_EMP"" = :CD_EMP, ""NM_EMP"" = :NM_EMP, ""TXT_PASSWD"" = :TXT_PASSWD, ""CD_DEPT"" = :CD_DEPT, ""TXT_ZIP"" = :TXT_ZIP, ""TXT_ADDR1"" = :TXT_ADDR1, ""TXT_ADDR2"" = :TXT_ADDR2, ""TXT_ADDR3"" = :TXT_ADDR3, ""TXT_TEL"" = :TXT_TEL, ""TXT_FAX"" = :TXT_FAX, ""TXT_REM"" = :TXT_REM, ""CD_CREATE"" = :CD_CREATE, ""DTM_CREATE"" = :DTM_CREATE, ""CD_UPDATE"" = :CD_UPDATE, ""DTM_UPDATE"" = :DTM_UPDATE, ""FLG_ACTIVE"" = :FLG_ACTIVE WHERE ((""CD_CO"" = :Original_CD_CO) AND (""CD_EMP"" = :Original_CD_EMP) AND (""NM_EMP"" = :Original_NM_EMP) AND (""TXT_PASSWD"" = :Original_TXT_PASSWD) AND ((:IsNull_CD_DEPT = 1 AND ""CD_DEPT"" IS NULL) OR (""CD_DEPT"" = :Original_CD_DEPT)) AND ((:IsNull_TXT_ZIP = 1 AND ""TXT_ZIP"" IS NULL) OR (""TXT_ZIP"" = :Original_TXT_ZIP)) AND ((:IsNull_TXT_ADDR1 = 1 AND ""TXT_ADDR1"" IS NULL) OR (""TXT_ADDR1"" = :Original_TXT_ADDR1)) AND ((:IsNull_TXT_ADDR2 = 1 AND ""TXT_ADDR2"" IS NULL) OR (""TXT_ADDR2"" = :Original_TXT_ADDR2)) AND ((:IsNull_TXT_ADDR3 = 1 AND ""TXT_ADDR3"" IS NULL) OR (""TXT_ADDR3"" = :Original_TXT_ADDR3)) AND ((:IsNull_TXT_TEL = 1 AND ""TXT_TEL"" IS NULL) OR (""TXT_TEL"" = :Original_TXT_TEL)) AND ((:IsNull_TXT_FAX = 1 AND ""TXT_FAX"" IS NULL) OR (""TXT_FAX"" = :Original_TXT_FAX)) AND ((:IsNull_TXT_REM = 1 AND ""TXT_REM"" IS NULL) OR (""TXT_REM"" = :Original_TXT_REM)) AND (""CD_CREATE"" = :Original_CD_CREATE) AND (""DTM_CREATE"" = :Original_DTM_CREATE) AND (""CD_UPDATE"" = :Original_CD_UPDATE) AND (""DTM_UPDATE"" = :Original_DTM_UPDATE) AND (""FLG_ACTIVE"" = :Original_FLG_ACTIVE))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_EMP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_EMP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("NM_EMP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_EMP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_PASSWD", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_PASSWD", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_DEPT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_DEPT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ZIP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ZIP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ADDR1", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR1", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ADDR2", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_ADDR3", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR3", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_TEL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_TEL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_FAX", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_FAX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_EMP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_EMP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_NM_EMP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_EMP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_PASSWD", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_PASSWD", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_CD_DEPT", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "CD_DEPT", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_DEPT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_DEPT", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ZIP", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ZIP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ZIP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ZIP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ADDR1", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR1", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ADDR1", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR1", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ADDR2", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ADDR2", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_ADDR3", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR3", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_ADDR3", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_ADDR3", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_TEL", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_TEL", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_TEL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_TEL", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_FAX", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_FAX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_FAX", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_FAX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_REM", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::MembersListManagementProgram.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CD_CO, CD_EMP, NM_EMP, TXT_PASSWD, CD_DEPT, TXT_ZIP, TXT_ADDR1, TXT_ADDR2," +
                " TXT_ADDR3, TXT_TEL, TXT_FAX, TXT_REM, CD_CREATE, DTM_CREATE, CD_UPDATE, DTM_UPD" +
                "ATE, FLG_ACTIVE FROM TASK.M_EMP";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.M_EMPDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.M_EMPDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.M_EMPDataTable dataTable = new DataSet.M_EMPDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.M_EMPDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "M_EMP");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_CD_CO, 
                    string Original_CD_EMP, 
                    string Original_NM_EMP, 
                    string Original_TXT_PASSWD, 
                    string Original_CD_DEPT, 
                    string Original_TXT_ZIP, 
                    string Original_TXT_ADDR1, 
                    string Original_TXT_ADDR2, 
                    string Original_TXT_ADDR3, 
                    string Original_TXT_TEL, 
                    string Original_TXT_FAX, 
                    string Original_TXT_REM, 
                    string Original_CD_CREATE, 
                    System.DateTime Original_DTM_CREATE, 
                    string Original_CD_UPDATE, 
                    System.DateTime Original_DTM_UPDATE, 
                    string Original_FLG_ACTIVE) {
            if ((Original_CD_CO == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CO");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CD_CO));
            }
            if ((Original_CD_EMP == null)) {
                throw new global::System.ArgumentNullException("Original_CD_EMP");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CD_EMP));
            }
            if ((Original_NM_EMP == null)) {
                throw new global::System.ArgumentNullException("Original_NM_EMP");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_NM_EMP));
            }
            if ((Original_TXT_PASSWD == null)) {
                throw new global::System.ArgumentNullException("Original_TXT_PASSWD");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_TXT_PASSWD));
            }
            if ((Original_CD_DEPT == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_CD_DEPT));
            }
            if ((Original_TXT_ZIP == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_TXT_ZIP));
            }
            if ((Original_TXT_ADDR1 == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_TXT_ADDR1));
            }
            if ((Original_TXT_ADDR2 == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_TXT_ADDR2));
            }
            if ((Original_TXT_ADDR3 == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_TXT_ADDR3));
            }
            if ((Original_TXT_TEL == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_TXT_TEL));
            }
            if ((Original_TXT_FAX == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_TXT_FAX));
            }
            if ((Original_TXT_REM == null)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_TXT_REM));
            }
            if ((Original_CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CREATE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_CD_CREATE));
            }
            this.Adapter.DeleteCommand.Parameters[21].Value = ((System.DateTime)(Original_DTM_CREATE));
            if ((Original_CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_UPDATE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_CD_UPDATE));
            }
            this.Adapter.DeleteCommand.Parameters[23].Value = ((System.DateTime)(Original_DTM_UPDATE));
            if ((Original_FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("Original_FLG_ACTIVE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_FLG_ACTIVE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string CD_CO, 
                    string CD_EMP, 
                    string NM_EMP, 
                    string TXT_PASSWD, 
                    string CD_DEPT, 
                    string TXT_ZIP, 
                    string TXT_ADDR1, 
                    string TXT_ADDR2, 
                    string TXT_ADDR3, 
                    string TXT_TEL, 
                    string TXT_FAX, 
                    string TXT_REM, 
                    string CD_CREATE, 
                    System.DateTime DTM_CREATE, 
                    string CD_UPDATE, 
                    System.DateTime DTM_UPDATE, 
                    string FLG_ACTIVE) {
            if ((CD_CO == null)) {
                throw new global::System.ArgumentNullException("CD_CO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CD_CO));
            }
            if ((CD_EMP == null)) {
                throw new global::System.ArgumentNullException("CD_EMP");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(CD_EMP));
            }
            if ((NM_EMP == null)) {
                throw new global::System.ArgumentNullException("NM_EMP");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(NM_EMP));
            }
            if ((TXT_PASSWD == null)) {
                throw new global::System.ArgumentNullException("TXT_PASSWD");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TXT_PASSWD));
            }
            if ((CD_DEPT == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(CD_DEPT));
            }
            if ((TXT_ZIP == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(TXT_ZIP));
            }
            if ((TXT_ADDR1 == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(TXT_ADDR1));
            }
            if ((TXT_ADDR2 == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(TXT_ADDR2));
            }
            if ((TXT_ADDR3 == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(TXT_ADDR3));
            }
            if ((TXT_TEL == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(TXT_TEL));
            }
            if ((TXT_FAX == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(TXT_FAX));
            }
            if ((TXT_REM == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(TXT_REM));
            }
            if ((CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("CD_CREATE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(CD_CREATE));
            }
            this.Adapter.InsertCommand.Parameters[13].Value = ((System.DateTime)(DTM_CREATE));
            if ((CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("CD_UPDATE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(CD_UPDATE));
            }
            this.Adapter.InsertCommand.Parameters[15].Value = ((System.DateTime)(DTM_UPDATE));
            if ((FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("FLG_ACTIVE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(FLG_ACTIVE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string CD_CO, 
                    string CD_EMP, 
                    string NM_EMP, 
                    string TXT_PASSWD, 
                    string CD_DEPT, 
                    string TXT_ZIP, 
                    string TXT_ADDR1, 
                    string TXT_ADDR2, 
                    string TXT_ADDR3, 
                    string TXT_TEL, 
                    string TXT_FAX, 
                    string TXT_REM, 
                    string CD_CREATE, 
                    System.DateTime DTM_CREATE, 
                    string CD_UPDATE, 
                    System.DateTime DTM_UPDATE, 
                    string FLG_ACTIVE, 
                    string Original_CD_CO, 
                    string Original_CD_EMP, 
                    string Original_NM_EMP, 
                    string Original_TXT_PASSWD, 
                    string Original_CD_DEPT, 
                    string Original_TXT_ZIP, 
                    string Original_TXT_ADDR1, 
                    string Original_TXT_ADDR2, 
                    string Original_TXT_ADDR3, 
                    string Original_TXT_TEL, 
                    string Original_TXT_FAX, 
                    string Original_TXT_REM, 
                    string Original_CD_CREATE, 
                    System.DateTime Original_DTM_CREATE, 
                    string Original_CD_UPDATE, 
                    System.DateTime Original_DTM_UPDATE, 
                    string Original_FLG_ACTIVE) {
            if ((CD_CO == null)) {
                throw new global::System.ArgumentNullException("CD_CO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CD_CO));
            }
            if ((CD_EMP == null)) {
                throw new global::System.ArgumentNullException("CD_EMP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(CD_EMP));
            }
            if ((NM_EMP == null)) {
                throw new global::System.ArgumentNullException("NM_EMP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(NM_EMP));
            }
            if ((TXT_PASSWD == null)) {
                throw new global::System.ArgumentNullException("TXT_PASSWD");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TXT_PASSWD));
            }
            if ((CD_DEPT == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(CD_DEPT));
            }
            if ((TXT_ZIP == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(TXT_ZIP));
            }
            if ((TXT_ADDR1 == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(TXT_ADDR1));
            }
            if ((TXT_ADDR2 == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(TXT_ADDR2));
            }
            if ((TXT_ADDR3 == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(TXT_ADDR3));
            }
            if ((TXT_TEL == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(TXT_TEL));
            }
            if ((TXT_FAX == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(TXT_FAX));
            }
            if ((TXT_REM == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(TXT_REM));
            }
            if ((CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("CD_CREATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(CD_CREATE));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(DTM_CREATE));
            if ((CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("CD_UPDATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(CD_UPDATE));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(DTM_UPDATE));
            if ((FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("FLG_ACTIVE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(FLG_ACTIVE));
            }
            if ((Original_CD_CO == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_CD_CO));
            }
            if ((Original_CD_EMP == null)) {
                throw new global::System.ArgumentNullException("Original_CD_EMP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_CD_EMP));
            }
            if ((Original_NM_EMP == null)) {
                throw new global::System.ArgumentNullException("Original_NM_EMP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_NM_EMP));
            }
            if ((Original_TXT_PASSWD == null)) {
                throw new global::System.ArgumentNullException("Original_TXT_PASSWD");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_TXT_PASSWD));
            }
            if ((Original_CD_DEPT == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_CD_DEPT));
            }
            if ((Original_TXT_ZIP == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_TXT_ZIP));
            }
            if ((Original_TXT_ADDR1 == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_TXT_ADDR1));
            }
            if ((Original_TXT_ADDR2 == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_TXT_ADDR2));
            }
            if ((Original_TXT_ADDR3 == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_TXT_ADDR3));
            }
            if ((Original_TXT_TEL == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_TXT_TEL));
            }
            if ((Original_TXT_FAX == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_TXT_FAX));
            }
            if ((Original_TXT_REM == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_TXT_REM));
            }
            if ((Original_CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CREATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_CD_CREATE));
            }
            this.Adapter.UpdateCommand.Parameters[38].Value = ((System.DateTime)(Original_DTM_CREATE));
            if ((Original_CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_UPDATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(Original_CD_UPDATE));
            }
            this.Adapter.UpdateCommand.Parameters[40].Value = ((System.DateTime)(Original_DTM_UPDATE));
            if ((Original_FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("Original_FLG_ACTIVE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_FLG_ACTIVE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string NM_EMP, 
                    string TXT_PASSWD, 
                    string CD_DEPT, 
                    string TXT_ZIP, 
                    string TXT_ADDR1, 
                    string TXT_ADDR2, 
                    string TXT_ADDR3, 
                    string TXT_TEL, 
                    string TXT_FAX, 
                    string TXT_REM, 
                    string CD_CREATE, 
                    System.DateTime DTM_CREATE, 
                    string CD_UPDATE, 
                    System.DateTime DTM_UPDATE, 
                    string FLG_ACTIVE, 
                    string Original_CD_CO, 
                    string Original_CD_EMP, 
                    string Original_NM_EMP, 
                    string Original_TXT_PASSWD, 
                    string Original_CD_DEPT, 
                    string Original_TXT_ZIP, 
                    string Original_TXT_ADDR1, 
                    string Original_TXT_ADDR2, 
                    string Original_TXT_ADDR3, 
                    string Original_TXT_TEL, 
                    string Original_TXT_FAX, 
                    string Original_TXT_REM, 
                    string Original_CD_CREATE, 
                    System.DateTime Original_DTM_CREATE, 
                    string Original_CD_UPDATE, 
                    System.DateTime Original_DTM_UPDATE, 
                    string Original_FLG_ACTIVE) {
            return this.Update(Original_CD_CO, Original_CD_EMP, NM_EMP, TXT_PASSWD, CD_DEPT, TXT_ZIP, TXT_ADDR1, TXT_ADDR2, TXT_ADDR3, TXT_TEL, TXT_FAX, TXT_REM, CD_CREATE, DTM_CREATE, CD_UPDATE, DTM_UPDATE, FLG_ACTIVE, Original_CD_CO, Original_CD_EMP, Original_NM_EMP, Original_TXT_PASSWD, Original_CD_DEPT, Original_TXT_ZIP, Original_TXT_ADDR1, Original_TXT_ADDR2, Original_TXT_ADDR3, Original_TXT_TEL, Original_TXT_FAX, Original_TXT_REM, Original_CD_CREATE, Original_DTM_CREATE, Original_CD_UPDATE, Original_DTM_UPDATE, Original_FLG_ACTIVE);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class M_LOOKUPTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleTransaction _transaction;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public M_LOOKUPTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "M_LOOKUP";
            tableMapping.ColumnMappings.Add("CD_CO", "CD_CO");
            tableMapping.ColumnMappings.Add("TXT_LOOKUP_KEY", "TXT_LOOKUP_KEY");
            tableMapping.ColumnMappings.Add("NM_LOOKUP", "NM_LOOKUP");
            tableMapping.ColumnMappings.Add("CD_LOOKUP_TYPE", "CD_LOOKUP_TYPE");
            tableMapping.ColumnMappings.Add("CD_LOOKUP", "CD_LOOKUP");
            tableMapping.ColumnMappings.Add("N_SORT", "N_SORT");
            tableMapping.ColumnMappings.Add("TXT_REM", "TXT_REM");
            tableMapping.ColumnMappings.Add("CD_CREATE", "CD_CREATE");
            tableMapping.ColumnMappings.Add("DTM_CREATE", "DTM_CREATE");
            tableMapping.ColumnMappings.Add("CD_UPDATE", "CD_UPDATE");
            tableMapping.ColumnMappings.Add("DTM_UPDATE", "DTM_UPDATE");
            tableMapping.ColumnMappings.Add("FLG_ACTIVE", "FLG_ACTIVE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""TASK"".""M_LOOKUP"" WHERE ((""CD_CO"" = :Original_CD_CO) AND (""TXT_LOOKUP_KEY"" = :Original_TXT_LOOKUP_KEY) AND (""NM_LOOKUP"" = :Original_NM_LOOKUP) AND (""CD_LOOKUP_TYPE"" = :Original_CD_LOOKUP_TYPE) AND (""CD_LOOKUP"" = :Original_CD_LOOKUP) AND (""N_SORT"" = :Original_N_SORT) AND ((:IsNull_TXT_REM = 1 AND ""TXT_REM"" IS NULL) OR (""TXT_REM"" = :Original_TXT_REM)) AND (""CD_CREATE"" = :Original_CD_CREATE) AND (""DTM_CREATE"" = :Original_DTM_CREATE) AND (""CD_UPDATE"" = :Original_CD_UPDATE) AND (""DTM_UPDATE"" = :Original_DTM_UPDATE) AND (""FLG_ACTIVE"" = :Original_FLG_ACTIVE))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_LOOKUP_KEY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_LOOKUP_KEY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_NM_LOOKUP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_LOOKUP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_LOOKUP_TYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_LOOKUP_TYPE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_LOOKUP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_LOOKUP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_N_SORT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "N_SORT", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_REM", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""TASK"".""M_LOOKUP"" (""CD_CO"", ""TXT_LOOKUP_KEY"", ""NM_LOOKUP"", ""CD_LOOKUP_TYPE"", ""CD_LOOKUP"", ""N_SORT"", ""TXT_REM"", ""CD_CREATE"", ""DTM_CREATE"", ""CD_UPDATE"", ""DTM_UPDATE"", ""FLG_ACTIVE"") VALUES (:CD_CO, :TXT_LOOKUP_KEY, :NM_LOOKUP, :CD_LOOKUP_TYPE, :CD_LOOKUP, :N_SORT, :TXT_REM, :CD_CREATE, :DTM_CREATE, :CD_UPDATE, :DTM_UPDATE, :FLG_ACTIVE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_LOOKUP_KEY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_LOOKUP_KEY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("NM_LOOKUP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_LOOKUP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_LOOKUP_TYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_LOOKUP_TYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_LOOKUP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_LOOKUP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("N_SORT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "N_SORT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""TASK"".""M_LOOKUP"" SET ""CD_CO"" = :CD_CO, ""TXT_LOOKUP_KEY"" = :TXT_LOOKUP_KEY, ""NM_LOOKUP"" = :NM_LOOKUP, ""CD_LOOKUP_TYPE"" = :CD_LOOKUP_TYPE, ""CD_LOOKUP"" = :CD_LOOKUP, ""N_SORT"" = :N_SORT, ""TXT_REM"" = :TXT_REM, ""CD_CREATE"" = :CD_CREATE, ""DTM_CREATE"" = :DTM_CREATE, ""CD_UPDATE"" = :CD_UPDATE, ""DTM_UPDATE"" = :DTM_UPDATE, ""FLG_ACTIVE"" = :FLG_ACTIVE WHERE ((""CD_CO"" = :Original_CD_CO) AND (""TXT_LOOKUP_KEY"" = :Original_TXT_LOOKUP_KEY) AND (""NM_LOOKUP"" = :Original_NM_LOOKUP) AND (""CD_LOOKUP_TYPE"" = :Original_CD_LOOKUP_TYPE) AND (""CD_LOOKUP"" = :Original_CD_LOOKUP) AND (""N_SORT"" = :Original_N_SORT) AND ((:IsNull_TXT_REM = 1 AND ""TXT_REM"" IS NULL) OR (""TXT_REM"" = :Original_TXT_REM)) AND (""CD_CREATE"" = :Original_CD_CREATE) AND (""DTM_CREATE"" = :Original_DTM_CREATE) AND (""CD_UPDATE"" = :Original_CD_UPDATE) AND (""DTM_UPDATE"" = :Original_DTM_UPDATE) AND (""FLG_ACTIVE"" = :Original_FLG_ACTIVE))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_LOOKUP_KEY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_LOOKUP_KEY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("NM_LOOKUP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_LOOKUP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_LOOKUP_TYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_LOOKUP_TYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_LOOKUP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_LOOKUP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("N_SORT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "N_SORT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_LOOKUP_KEY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_LOOKUP_KEY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_NM_LOOKUP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "NM_LOOKUP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_LOOKUP_TYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_LOOKUP_TYPE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_LOOKUP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_LOOKUP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_N_SORT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "N_SORT", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_REM", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_REM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_REM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::MembersListManagementProgram.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CD_CO, TXT_LOOKUP_KEY, NM_LOOKUP, CD_LOOKUP_TYPE, CD_LOOKUP, N_SORT, TXT_R" +
                "EM, CD_CREATE, DTM_CREATE, CD_UPDATE, DTM_UPDATE, FLG_ACTIVE FROM TASK.M_LOOKUP";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.M_LOOKUPDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.M_LOOKUPDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.M_LOOKUPDataTable dataTable = new DataSet.M_LOOKUPDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.M_LOOKUPDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "M_LOOKUP");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CD_CO, string Original_TXT_LOOKUP_KEY, string Original_NM_LOOKUP, string Original_CD_LOOKUP_TYPE, string Original_CD_LOOKUP, decimal Original_N_SORT, string Original_TXT_REM, string Original_CD_CREATE, System.DateTime Original_DTM_CREATE, string Original_CD_UPDATE, System.DateTime Original_DTM_UPDATE, string Original_FLG_ACTIVE) {
            if ((Original_CD_CO == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CO");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CD_CO));
            }
            if ((Original_TXT_LOOKUP_KEY == null)) {
                throw new global::System.ArgumentNullException("Original_TXT_LOOKUP_KEY");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TXT_LOOKUP_KEY));
            }
            if ((Original_NM_LOOKUP == null)) {
                throw new global::System.ArgumentNullException("Original_NM_LOOKUP");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_NM_LOOKUP));
            }
            if ((Original_CD_LOOKUP_TYPE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_LOOKUP_TYPE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_CD_LOOKUP_TYPE));
            }
            if ((Original_CD_LOOKUP == null)) {
                throw new global::System.ArgumentNullException("Original_CD_LOOKUP");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_CD_LOOKUP));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_N_SORT));
            if ((Original_TXT_REM == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_TXT_REM));
            }
            if ((Original_CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CREATE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_CD_CREATE));
            }
            this.Adapter.DeleteCommand.Parameters[9].Value = ((System.DateTime)(Original_DTM_CREATE));
            if ((Original_CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_UPDATE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_CD_UPDATE));
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((System.DateTime)(Original_DTM_UPDATE));
            if ((Original_FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("Original_FLG_ACTIVE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_FLG_ACTIVE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CD_CO, string TXT_LOOKUP_KEY, string NM_LOOKUP, string CD_LOOKUP_TYPE, string CD_LOOKUP, decimal N_SORT, string TXT_REM, string CD_CREATE, System.DateTime DTM_CREATE, string CD_UPDATE, System.DateTime DTM_UPDATE, string FLG_ACTIVE) {
            if ((CD_CO == null)) {
                throw new global::System.ArgumentNullException("CD_CO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CD_CO));
            }
            if ((TXT_LOOKUP_KEY == null)) {
                throw new global::System.ArgumentNullException("TXT_LOOKUP_KEY");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TXT_LOOKUP_KEY));
            }
            if ((NM_LOOKUP == null)) {
                throw new global::System.ArgumentNullException("NM_LOOKUP");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(NM_LOOKUP));
            }
            if ((CD_LOOKUP_TYPE == null)) {
                throw new global::System.ArgumentNullException("CD_LOOKUP_TYPE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CD_LOOKUP_TYPE));
            }
            if ((CD_LOOKUP == null)) {
                throw new global::System.ArgumentNullException("CD_LOOKUP");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(CD_LOOKUP));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(N_SORT));
            if ((TXT_REM == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(TXT_REM));
            }
            if ((CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("CD_CREATE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(CD_CREATE));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((System.DateTime)(DTM_CREATE));
            if ((CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("CD_UPDATE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(CD_UPDATE));
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((System.DateTime)(DTM_UPDATE));
            if ((FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("FLG_ACTIVE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(FLG_ACTIVE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string CD_CO, 
                    string TXT_LOOKUP_KEY, 
                    string NM_LOOKUP, 
                    string CD_LOOKUP_TYPE, 
                    string CD_LOOKUP, 
                    decimal N_SORT, 
                    string TXT_REM, 
                    string CD_CREATE, 
                    System.DateTime DTM_CREATE, 
                    string CD_UPDATE, 
                    System.DateTime DTM_UPDATE, 
                    string FLG_ACTIVE, 
                    string Original_CD_CO, 
                    string Original_TXT_LOOKUP_KEY, 
                    string Original_NM_LOOKUP, 
                    string Original_CD_LOOKUP_TYPE, 
                    string Original_CD_LOOKUP, 
                    decimal Original_N_SORT, 
                    string Original_TXT_REM, 
                    string Original_CD_CREATE, 
                    System.DateTime Original_DTM_CREATE, 
                    string Original_CD_UPDATE, 
                    System.DateTime Original_DTM_UPDATE, 
                    string Original_FLG_ACTIVE) {
            if ((CD_CO == null)) {
                throw new global::System.ArgumentNullException("CD_CO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CD_CO));
            }
            if ((TXT_LOOKUP_KEY == null)) {
                throw new global::System.ArgumentNullException("TXT_LOOKUP_KEY");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TXT_LOOKUP_KEY));
            }
            if ((NM_LOOKUP == null)) {
                throw new global::System.ArgumentNullException("NM_LOOKUP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(NM_LOOKUP));
            }
            if ((CD_LOOKUP_TYPE == null)) {
                throw new global::System.ArgumentNullException("CD_LOOKUP_TYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CD_LOOKUP_TYPE));
            }
            if ((CD_LOOKUP == null)) {
                throw new global::System.ArgumentNullException("CD_LOOKUP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(CD_LOOKUP));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(N_SORT));
            if ((TXT_REM == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(TXT_REM));
            }
            if ((CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("CD_CREATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(CD_CREATE));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(DTM_CREATE));
            if ((CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("CD_UPDATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(CD_UPDATE));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(DTM_UPDATE));
            if ((FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("FLG_ACTIVE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(FLG_ACTIVE));
            }
            if ((Original_CD_CO == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_CD_CO));
            }
            if ((Original_TXT_LOOKUP_KEY == null)) {
                throw new global::System.ArgumentNullException("Original_TXT_LOOKUP_KEY");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_TXT_LOOKUP_KEY));
            }
            if ((Original_NM_LOOKUP == null)) {
                throw new global::System.ArgumentNullException("Original_NM_LOOKUP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_NM_LOOKUP));
            }
            if ((Original_CD_LOOKUP_TYPE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_LOOKUP_TYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_CD_LOOKUP_TYPE));
            }
            if ((Original_CD_LOOKUP == null)) {
                throw new global::System.ArgumentNullException("Original_CD_LOOKUP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_CD_LOOKUP));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(Original_N_SORT));
            if ((Original_TXT_REM == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_TXT_REM));
            }
            if ((Original_CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CREATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_CD_CREATE));
            }
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_DTM_CREATE));
            if ((Original_CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_UPDATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_CD_UPDATE));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((System.DateTime)(Original_DTM_UPDATE));
            if ((Original_FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("Original_FLG_ACTIVE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_FLG_ACTIVE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string NM_LOOKUP, 
                    string CD_LOOKUP_TYPE, 
                    string CD_LOOKUP, 
                    decimal N_SORT, 
                    string TXT_REM, 
                    string CD_CREATE, 
                    System.DateTime DTM_CREATE, 
                    string CD_UPDATE, 
                    System.DateTime DTM_UPDATE, 
                    string FLG_ACTIVE, 
                    string Original_CD_CO, 
                    string Original_TXT_LOOKUP_KEY, 
                    string Original_NM_LOOKUP, 
                    string Original_CD_LOOKUP_TYPE, 
                    string Original_CD_LOOKUP, 
                    decimal Original_N_SORT, 
                    string Original_TXT_REM, 
                    string Original_CD_CREATE, 
                    System.DateTime Original_DTM_CREATE, 
                    string Original_CD_UPDATE, 
                    System.DateTime Original_DTM_UPDATE, 
                    string Original_FLG_ACTIVE) {
            return this.Update(Original_CD_CO, Original_TXT_LOOKUP_KEY, NM_LOOKUP, CD_LOOKUP_TYPE, CD_LOOKUP, N_SORT, TXT_REM, CD_CREATE, DTM_CREATE, CD_UPDATE, DTM_UPDATE, FLG_ACTIVE, Original_CD_CO, Original_TXT_LOOKUP_KEY, Original_NM_LOOKUP, Original_CD_LOOKUP_TYPE, Original_CD_LOOKUP, Original_N_SORT, Original_TXT_REM, Original_CD_CREATE, Original_DTM_CREATE, Original_CD_UPDATE, Original_DTM_UPDATE, Original_FLG_ACTIVE);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class T_TASKTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleTransaction _transaction;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public T_TASKTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "T_TASK";
            tableMapping.ColumnMappings.Add("CD_CO", "CD_CO");
            tableMapping.ColumnMappings.Add("ID_TASK", "ID_TASK");
            tableMapping.ColumnMappings.Add("CD_EMP", "CD_EMP");
            tableMapping.ColumnMappings.Add("CLS_STATUS", "CLS_STATUS");
            tableMapping.ColumnMappings.Add("CLS_PRIORITY", "CLS_PRIORITY");
            tableMapping.ColumnMappings.Add("TXT_DETAIL", "TXT_DETAIL");
            tableMapping.ColumnMappings.Add("CD_CREATE", "CD_CREATE");
            tableMapping.ColumnMappings.Add("DTM_CREATE", "DTM_CREATE");
            tableMapping.ColumnMappings.Add("CD_UPDATE", "CD_UPDATE");
            tableMapping.ColumnMappings.Add("DTM_UPDATE", "DTM_UPDATE");
            tableMapping.ColumnMappings.Add("FLG_ACTIVE", "FLG_ACTIVE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""TASK"".""T_TASK"" WHERE ((""CD_CO"" = :Original_CD_CO) AND (""ID_TASK"" = :Original_ID_TASK) AND (""CD_EMP"" = :Original_CD_EMP) AND (""CLS_STATUS"" = :Original_CLS_STATUS) AND (""CLS_PRIORITY"" = :Original_CLS_PRIORITY) AND ((:IsNull_TXT_DETAIL = 1 AND ""TXT_DETAIL"" IS NULL) OR (""TXT_DETAIL"" = :Original_TXT_DETAIL)) AND (""CD_CREATE"" = :Original_CD_CREATE) AND (""DTM_CREATE"" = :Original_DTM_CREATE) AND (""CD_UPDATE"" = :Original_CD_UPDATE) AND (""DTM_UPDATE"" = :Original_DTM_UPDATE) AND (""FLG_ACTIVE"" = :Original_FLG_ACTIVE))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_ID_TASK", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ID_TASK", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_EMP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_EMP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CLS_STATUS", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CLS_STATUS", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CLS_PRIORITY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CLS_PRIORITY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_DETAIL", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_DETAIL", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_DETAIL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_DETAIL", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""TASK"".""T_TASK"" (""CD_CO"", ""ID_TASK"", ""CD_EMP"", ""CLS_STATUS"", ""CLS_PRIORITY"", ""TXT_DETAIL"", ""CD_CREATE"", ""DTM_CREATE"", ""CD_UPDATE"", ""DTM_UPDATE"", ""FLG_ACTIVE"") VALUES (:CD_CO, :ID_TASK, :CD_EMP, :CLS_STATUS, :CLS_PRIORITY, :TXT_DETAIL, :CD_CREATE, :DTM_CREATE, :CD_UPDATE, :DTM_UPDATE, :FLG_ACTIVE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ID_TASK", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ID_TASK", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_EMP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_EMP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CLS_STATUS", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CLS_STATUS", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CLS_PRIORITY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CLS_PRIORITY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_DETAIL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_DETAIL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""TASK"".""T_TASK"" SET ""CD_CO"" = :CD_CO, ""ID_TASK"" = :ID_TASK, ""CD_EMP"" = :CD_EMP, ""CLS_STATUS"" = :CLS_STATUS, ""CLS_PRIORITY"" = :CLS_PRIORITY, ""TXT_DETAIL"" = :TXT_DETAIL, ""CD_CREATE"" = :CD_CREATE, ""DTM_CREATE"" = :DTM_CREATE, ""CD_UPDATE"" = :CD_UPDATE, ""DTM_UPDATE"" = :DTM_UPDATE, ""FLG_ACTIVE"" = :FLG_ACTIVE WHERE ((""CD_CO"" = :Original_CD_CO) AND (""ID_TASK"" = :Original_ID_TASK) AND (""CD_EMP"" = :Original_CD_EMP) AND (""CLS_STATUS"" = :Original_CLS_STATUS) AND (""CLS_PRIORITY"" = :Original_CLS_PRIORITY) AND ((:IsNull_TXT_DETAIL = 1 AND ""TXT_DETAIL"" IS NULL) OR (""TXT_DETAIL"" = :Original_TXT_DETAIL)) AND (""CD_CREATE"" = :Original_CD_CREATE) AND (""DTM_CREATE"" = :Original_DTM_CREATE) AND (""CD_UPDATE"" = :Original_CD_UPDATE) AND (""DTM_UPDATE"" = :Original_DTM_UPDATE) AND (""FLG_ACTIVE"" = :Original_FLG_ACTIVE))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ID_TASK", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ID_TASK", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_EMP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_EMP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CLS_STATUS", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CLS_STATUS", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CLS_PRIORITY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CLS_PRIORITY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TXT_DETAIL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_DETAIL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_ID_TASK", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ID_TASK", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_EMP", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_EMP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CLS_STATUS", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CLS_STATUS", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CLS_PRIORITY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CLS_PRIORITY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_TXT_DETAIL", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "TXT_DETAIL", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TXT_DETAIL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TXT_DETAIL", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_CREATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_CREATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_CREATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CD_UPDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CD_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DTM_UPDATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "DTM_UPDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_FLG_ACTIVE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FLG_ACTIVE", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::MembersListManagementProgram.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CD_CO, ID_TASK, CD_EMP, CLS_STATUS, CLS_PRIORITY, TXT_DETAIL, CD_CREATE, D" +
                "TM_CREATE, CD_UPDATE, DTM_UPDATE, FLG_ACTIVE FROM TASK.T_TASK";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet.T_TASKDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet.T_TASKDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet.T_TASKDataTable dataTable = new DataSet.T_TASKDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet.T_TASKDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet dataSet) {
            return this.Adapter.Update(dataSet, "T_TASK");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CD_CO, string Original_ID_TASK, string Original_CD_EMP, string Original_CLS_STATUS, string Original_CLS_PRIORITY, string Original_TXT_DETAIL, string Original_CD_CREATE, System.DateTime Original_DTM_CREATE, string Original_CD_UPDATE, System.DateTime Original_DTM_UPDATE, string Original_FLG_ACTIVE) {
            if ((Original_CD_CO == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CO");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CD_CO));
            }
            if ((Original_ID_TASK == null)) {
                throw new global::System.ArgumentNullException("Original_ID_TASK");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ID_TASK));
            }
            if ((Original_CD_EMP == null)) {
                throw new global::System.ArgumentNullException("Original_CD_EMP");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_CD_EMP));
            }
            if ((Original_CLS_STATUS == null)) {
                throw new global::System.ArgumentNullException("Original_CLS_STATUS");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_CLS_STATUS));
            }
            if ((Original_CLS_PRIORITY == null)) {
                throw new global::System.ArgumentNullException("Original_CLS_PRIORITY");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_CLS_PRIORITY));
            }
            if ((Original_TXT_DETAIL == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_TXT_DETAIL));
            }
            if ((Original_CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CREATE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_CD_CREATE));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_DTM_CREATE));
            if ((Original_CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_UPDATE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_CD_UPDATE));
            }
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_DTM_UPDATE));
            if ((Original_FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("Original_FLG_ACTIVE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_FLG_ACTIVE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CD_CO, string ID_TASK, string CD_EMP, string CLS_STATUS, string CLS_PRIORITY, string TXT_DETAIL, string CD_CREATE, System.DateTime DTM_CREATE, string CD_UPDATE, System.DateTime DTM_UPDATE, string FLG_ACTIVE) {
            if ((CD_CO == null)) {
                throw new global::System.ArgumentNullException("CD_CO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CD_CO));
            }
            if ((ID_TASK == null)) {
                throw new global::System.ArgumentNullException("ID_TASK");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ID_TASK));
            }
            if ((CD_EMP == null)) {
                throw new global::System.ArgumentNullException("CD_EMP");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CD_EMP));
            }
            if ((CLS_STATUS == null)) {
                throw new global::System.ArgumentNullException("CLS_STATUS");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CLS_STATUS));
            }
            if ((CLS_PRIORITY == null)) {
                throw new global::System.ArgumentNullException("CLS_PRIORITY");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(CLS_PRIORITY));
            }
            if ((TXT_DETAIL == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(TXT_DETAIL));
            }
            if ((CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("CD_CREATE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(CD_CREATE));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(DTM_CREATE));
            if ((CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("CD_UPDATE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(CD_UPDATE));
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(DTM_UPDATE));
            if ((FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("FLG_ACTIVE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(FLG_ACTIVE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string CD_CO, 
                    string ID_TASK, 
                    string CD_EMP, 
                    string CLS_STATUS, 
                    string CLS_PRIORITY, 
                    string TXT_DETAIL, 
                    string CD_CREATE, 
                    System.DateTime DTM_CREATE, 
                    string CD_UPDATE, 
                    System.DateTime DTM_UPDATE, 
                    string FLG_ACTIVE, 
                    string Original_CD_CO, 
                    string Original_ID_TASK, 
                    string Original_CD_EMP, 
                    string Original_CLS_STATUS, 
                    string Original_CLS_PRIORITY, 
                    string Original_TXT_DETAIL, 
                    string Original_CD_CREATE, 
                    System.DateTime Original_DTM_CREATE, 
                    string Original_CD_UPDATE, 
                    System.DateTime Original_DTM_UPDATE, 
                    string Original_FLG_ACTIVE) {
            if ((CD_CO == null)) {
                throw new global::System.ArgumentNullException("CD_CO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CD_CO));
            }
            if ((ID_TASK == null)) {
                throw new global::System.ArgumentNullException("ID_TASK");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ID_TASK));
            }
            if ((CD_EMP == null)) {
                throw new global::System.ArgumentNullException("CD_EMP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CD_EMP));
            }
            if ((CLS_STATUS == null)) {
                throw new global::System.ArgumentNullException("CLS_STATUS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CLS_STATUS));
            }
            if ((CLS_PRIORITY == null)) {
                throw new global::System.ArgumentNullException("CLS_PRIORITY");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(CLS_PRIORITY));
            }
            if ((TXT_DETAIL == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(TXT_DETAIL));
            }
            if ((CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("CD_CREATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(CD_CREATE));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(DTM_CREATE));
            if ((CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("CD_UPDATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(CD_UPDATE));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(DTM_UPDATE));
            if ((FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("FLG_ACTIVE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(FLG_ACTIVE));
            }
            if ((Original_CD_CO == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_CD_CO));
            }
            if ((Original_ID_TASK == null)) {
                throw new global::System.ArgumentNullException("Original_ID_TASK");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_ID_TASK));
            }
            if ((Original_CD_EMP == null)) {
                throw new global::System.ArgumentNullException("Original_CD_EMP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_CD_EMP));
            }
            if ((Original_CLS_STATUS == null)) {
                throw new global::System.ArgumentNullException("Original_CLS_STATUS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_CLS_STATUS));
            }
            if ((Original_CLS_PRIORITY == null)) {
                throw new global::System.ArgumentNullException("Original_CLS_PRIORITY");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_CLS_PRIORITY));
            }
            if ((Original_TXT_DETAIL == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_TXT_DETAIL));
            }
            if ((Original_CD_CREATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_CREATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_CD_CREATE));
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((System.DateTime)(Original_DTM_CREATE));
            if ((Original_CD_UPDATE == null)) {
                throw new global::System.ArgumentNullException("Original_CD_UPDATE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_CD_UPDATE));
            }
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_DTM_UPDATE));
            if ((Original_FLG_ACTIVE == null)) {
                throw new global::System.ArgumentNullException("Original_FLG_ACTIVE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_FLG_ACTIVE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string CD_EMP, 
                    string CLS_STATUS, 
                    string CLS_PRIORITY, 
                    string TXT_DETAIL, 
                    string CD_CREATE, 
                    System.DateTime DTM_CREATE, 
                    string CD_UPDATE, 
                    System.DateTime DTM_UPDATE, 
                    string FLG_ACTIVE, 
                    string Original_CD_CO, 
                    string Original_ID_TASK, 
                    string Original_CD_EMP, 
                    string Original_CLS_STATUS, 
                    string Original_CLS_PRIORITY, 
                    string Original_TXT_DETAIL, 
                    string Original_CD_CREATE, 
                    System.DateTime Original_DTM_CREATE, 
                    string Original_CD_UPDATE, 
                    System.DateTime Original_DTM_UPDATE, 
                    string Original_FLG_ACTIVE) {
            return this.Update(Original_CD_CO, Original_ID_TASK, CD_EMP, CLS_STATUS, CLS_PRIORITY, TXT_DETAIL, CD_CREATE, DTM_CREATE, CD_UPDATE, DTM_UPDATE, FLG_ACTIVE, Original_CD_CO, Original_ID_TASK, Original_CD_EMP, Original_CLS_STATUS, Original_CLS_PRIORITY, Original_TXT_DETAIL, Original_CD_CREATE, Original_DTM_CREATE, Original_CD_UPDATE, Original_DTM_UPDATE, Original_FLG_ACTIVE);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private M_COTableAdapter _m_COTableAdapter;
        
        private M_DEPTTableAdapter _m_DEPTTableAdapter;
        
        private M_EMPTableAdapter _m_EMPTableAdapter;
        
        private M_LOOKUPTableAdapter _m_LOOKUPTableAdapter;
        
        private T_TASKTableAdapter _t_TASKTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public M_COTableAdapter M_COTableAdapter {
            get {
                return this._m_COTableAdapter;
            }
            set {
                this._m_COTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public M_DEPTTableAdapter M_DEPTTableAdapter {
            get {
                return this._m_DEPTTableAdapter;
            }
            set {
                this._m_DEPTTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public M_EMPTableAdapter M_EMPTableAdapter {
            get {
                return this._m_EMPTableAdapter;
            }
            set {
                this._m_EMPTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public M_LOOKUPTableAdapter M_LOOKUPTableAdapter {
            get {
                return this._m_LOOKUPTableAdapter;
            }
            set {
                this._m_LOOKUPTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public T_TASKTableAdapter T_TASKTableAdapter {
            get {
                return this._t_TASKTableAdapter;
            }
            set {
                this._t_TASKTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._m_COTableAdapter != null) 
                            && (this._m_COTableAdapter.Connection != null))) {
                    return this._m_COTableAdapter.Connection;
                }
                if (((this._m_DEPTTableAdapter != null) 
                            && (this._m_DEPTTableAdapter.Connection != null))) {
                    return this._m_DEPTTableAdapter.Connection;
                }
                if (((this._m_EMPTableAdapter != null) 
                            && (this._m_EMPTableAdapter.Connection != null))) {
                    return this._m_EMPTableAdapter.Connection;
                }
                if (((this._m_LOOKUPTableAdapter != null) 
                            && (this._m_LOOKUPTableAdapter.Connection != null))) {
                    return this._m_LOOKUPTableAdapter.Connection;
                }
                if (((this._t_TASKTableAdapter != null) 
                            && (this._t_TASKTableAdapter.Connection != null))) {
                    return this._t_TASKTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._m_COTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._m_DEPTTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._m_EMPTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._m_LOOKUPTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._t_TASKTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(DataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._m_COTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.M_CO.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._m_COTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._m_DEPTTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.M_DEPT.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._m_DEPTTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._m_EMPTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.M_EMP.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._m_EMPTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._m_LOOKUPTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.M_LOOKUP.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._m_LOOKUPTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._t_TASKTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.T_TASK.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._t_TASKTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(DataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._m_COTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.M_CO.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._m_COTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._m_DEPTTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.M_DEPT.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._m_DEPTTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._m_EMPTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.M_EMP.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._m_EMPTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._m_LOOKUPTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.M_LOOKUP.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._m_LOOKUPTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._t_TASKTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.T_TASK.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._t_TASKTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(DataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._t_TASKTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.T_TASK.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._t_TASKTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._m_LOOKUPTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.M_LOOKUP.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._m_LOOKUPTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._m_EMPTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.M_EMP.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._m_EMPTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._m_DEPTTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.M_DEPT.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._m_DEPTTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._m_COTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.M_CO.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._m_COTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(DataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._m_COTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._m_COTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。");
            }
            if (((this._m_DEPTTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._m_DEPTTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。");
            }
            if (((this._m_EMPTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._m_EMPTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。");
            }
            if (((this._m_LOOKUPTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._m_LOOKUPTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。");
            }
            if (((this._t_TASKTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._t_TASKTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager には接続情報がありません。それぞれの TableAdapterManager TableAdapter プロパティを有効な" +
                        " TableAdapter インスタンスに設定してください。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("トランザクションを開始できません。現在のデータ接続がトランザクションをサポートしていないか、または現在の状態がトランザクションの開始を許可していません。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._m_COTableAdapter != null)) {
                    revertConnections.Add(this._m_COTableAdapter, this._m_COTableAdapter.Connection);
                    this._m_COTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(workConnection));
                    this._m_COTableAdapter.Transaction = ((global::System.Data.OracleClient.OracleTransaction)(workTransaction));
                    if (this._m_COTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._m_COTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._m_COTableAdapter.Adapter);
                    }
                }
                if ((this._m_DEPTTableAdapter != null)) {
                    revertConnections.Add(this._m_DEPTTableAdapter, this._m_DEPTTableAdapter.Connection);
                    this._m_DEPTTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(workConnection));
                    this._m_DEPTTableAdapter.Transaction = ((global::System.Data.OracleClient.OracleTransaction)(workTransaction));
                    if (this._m_DEPTTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._m_DEPTTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._m_DEPTTableAdapter.Adapter);
                    }
                }
                if ((this._m_EMPTableAdapter != null)) {
                    revertConnections.Add(this._m_EMPTableAdapter, this._m_EMPTableAdapter.Connection);
                    this._m_EMPTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(workConnection));
                    this._m_EMPTableAdapter.Transaction = ((global::System.Data.OracleClient.OracleTransaction)(workTransaction));
                    if (this._m_EMPTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._m_EMPTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._m_EMPTableAdapter.Adapter);
                    }
                }
                if ((this._m_LOOKUPTableAdapter != null)) {
                    revertConnections.Add(this._m_LOOKUPTableAdapter, this._m_LOOKUPTableAdapter.Connection);
                    this._m_LOOKUPTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(workConnection));
                    this._m_LOOKUPTableAdapter.Transaction = ((global::System.Data.OracleClient.OracleTransaction)(workTransaction));
                    if (this._m_LOOKUPTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._m_LOOKUPTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._m_LOOKUPTableAdapter.Adapter);
                    }
                }
                if ((this._t_TASKTableAdapter != null)) {
                    revertConnections.Add(this._t_TASKTableAdapter, this._t_TASKTableAdapter.Connection);
                    this._t_TASKTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(workConnection));
                    this._t_TASKTableAdapter.Transaction = ((global::System.Data.OracleClient.OracleTransaction)(workTransaction));
                    if (this._t_TASKTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._t_TASKTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._t_TASKTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._m_COTableAdapter != null)) {
                    this._m_COTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(revertConnections[this._m_COTableAdapter]));
                    this._m_COTableAdapter.Transaction = null;
                }
                if ((this._m_DEPTTableAdapter != null)) {
                    this._m_DEPTTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(revertConnections[this._m_DEPTTableAdapter]));
                    this._m_DEPTTableAdapter.Transaction = null;
                }
                if ((this._m_EMPTableAdapter != null)) {
                    this._m_EMPTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(revertConnections[this._m_EMPTableAdapter]));
                    this._m_EMPTableAdapter.Transaction = null;
                }
                if ((this._m_LOOKUPTableAdapter != null)) {
                    this._m_LOOKUPTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(revertConnections[this._m_LOOKUPTableAdapter]));
                    this._m_LOOKUPTableAdapter.Transaction = null;
                }
                if ((this._t_TASKTableAdapter != null)) {
                    this._t_TASKTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(revertConnections[this._t_TASKTableAdapter]));
                    this._t_TASKTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591